
payalka_reliz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001490  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800703c  0800703c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800703c  0800703c  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800703c  0800703c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08007044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200000a8  080070ec  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080070ec  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dddb  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bb  00000000  00000000  0002deac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000187fd  00000000  00000000  00030d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e9ce  00000000  00000000  00049505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f76a  00000000  00000000  00057ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e763d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ca8  00000000  00000000  000e7690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f50  00000000  00000000  000e8338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b94 	.word	0x08005b94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08005b94 	.word	0x08005b94

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__gesf2>:
 80009d8:	f04f 3cff 	mov.w	ip, #4294967295
 80009dc:	e006      	b.n	80009ec <__cmpsf2+0x4>
 80009de:	bf00      	nop

080009e0 <__lesf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	e002      	b.n	80009ec <__cmpsf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__cmpsf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009fc:	bf18      	it	ne
 80009fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a02:	d011      	beq.n	8000a28 <__cmpsf2+0x40>
 8000a04:	b001      	add	sp, #4
 8000a06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a0a:	bf18      	it	ne
 8000a0c:	ea90 0f01 	teqne	r0, r1
 8000a10:	bf58      	it	pl
 8000a12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a16:	bf88      	it	hi
 8000a18:	17c8      	asrhi	r0, r1, #31
 8000a1a:	bf38      	it	cc
 8000a1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a20:	bf18      	it	ne
 8000a22:	f040 0001 	orrne.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	d102      	bne.n	8000a34 <__cmpsf2+0x4c>
 8000a2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a32:	d105      	bne.n	8000a40 <__cmpsf2+0x58>
 8000a34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a38:	d1e4      	bne.n	8000a04 <__cmpsf2+0x1c>
 8000a3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a3e:	d0e1      	beq.n	8000a04 <__cmpsf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cfrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	4661      	mov	r1, ip
 8000a4e:	e7ff      	b.n	8000a50 <__aeabi_cfcmpeq>

08000a50 <__aeabi_cfcmpeq>:
 8000a50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a52:	f7ff ffc9 	bl	80009e8 <__cmpsf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a60 <__aeabi_fcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cfcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_fcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cfcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_fcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cfcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffd2 	bl	8000a48 <__aeabi_cfrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc8 	bl	8000a48 <__aeabi_cfrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_f2uiz>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	d20e      	bcs.n	8000ae6 <__aeabi_f2uiz+0x22>
 8000ac8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000acc:	d30b      	bcc.n	8000ae6 <__aeabi_f2uiz+0x22>
 8000ace:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ad2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ad6:	d409      	bmi.n	8000aec <__aeabi_f2uiz+0x28>
 8000ad8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	4770      	bx	lr
 8000aec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000af0:	d101      	bne.n	8000af6 <__aeabi_f2uiz+0x32>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	d102      	bne.n	8000afc <__aeabi_f2uiz+0x38>
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <mytftset>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mytftset(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af04      	add	r7, sp, #16
     ST7789_WriteString(35, 5, "HEATER_TEMP", Font_16x26, GREEN, BLACK);
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <mytftset+0xdc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	9202      	str	r2, [sp, #8]
 8000b10:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b14:	9201      	str	r2, [sp, #4]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <mytftset+0xe0>)
 8000b1e:	2105      	movs	r1, #5
 8000b20:	2023      	movs	r0, #35	; 0x23
 8000b22:	f001 fbf9 	bl	8002318 <ST7789_WriteString>
     ST7789_WriteString(60, 84, "FEN_TEMP", Font_16x26, color_tekst, BLACK);
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <mytftset+0xe4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <mytftset+0xdc>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	9102      	str	r1, [sp, #8]
 8000b32:	9201      	str	r2, [sp, #4]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	9200      	str	r2, [sp, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <mytftset+0xe8>)
 8000b3c:	2154      	movs	r1, #84	; 0x54
 8000b3e:	203c      	movs	r0, #60	; 0x3c
 8000b40:	f001 fbea 	bl	8002318 <ST7789_WriteString>
     ST7789_WriteString(65, 140, "AIRFLOW", Font_16x26, color_tekst, BLACK);
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <mytftset+0xe4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <mytftset+0xdc>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	9102      	str	r1, [sp, #8]
 8000b50:	9201      	str	r2, [sp, #4]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	9200      	str	r2, [sp, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <mytftset+0xec>)
 8000b5a:	218c      	movs	r1, #140	; 0x8c
 8000b5c:	2041      	movs	r0, #65	; 0x41
 8000b5e:	f001 fbdb 	bl	8002318 <ST7789_WriteString>
    ST7789_DrawRectangle(2, 2, 237, 78, WHITE);
 8000b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	234e      	movs	r3, #78	; 0x4e
 8000b6a:	22ed      	movs	r2, #237	; 0xed
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f001 fb0a 	bl	8002188 <ST7789_DrawRectangle>
 	ST7789_DrawRectangle(1, 1, 238, 79, WHITE);
 8000b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	234f      	movs	r3, #79	; 0x4f
 8000b7c:	22ee      	movs	r2, #238	; 0xee
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2001      	movs	r0, #1
 8000b82:	f001 fb01 	bl	8002188 <ST7789_DrawRectangle>
 	ST7789_DrawRectangle(0, 0, 239, 80, WHITE);
 8000b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2350      	movs	r3, #80	; 0x50
 8000b8e:	22ef      	movs	r2, #239	; 0xef
 8000b90:	2100      	movs	r1, #0
 8000b92:	2000      	movs	r0, #0
 8000b94:	f001 faf8 	bl	8002188 <ST7789_DrawRectangle>

 	ST7789_DrawRectangle(0, 81, 239, 239, WHITE);
 8000b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	23ef      	movs	r3, #239	; 0xef
 8000ba0:	22ef      	movs	r2, #239	; 0xef
 8000ba2:	2151      	movs	r1, #81	; 0x51
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 faef 	bl	8002188 <ST7789_DrawRectangle>
 	ST7789_DrawRectangle(1, 81, 238, 238, WHITE);
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	23ee      	movs	r3, #238	; 0xee
 8000bb2:	22ee      	movs	r2, #238	; 0xee
 8000bb4:	2151      	movs	r1, #81	; 0x51
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f001 fae6 	bl	8002188 <ST7789_DrawRectangle>
 	ST7789_DrawRectangle(2, 81, 237, 237, WHITE);
 8000bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	23ed      	movs	r3, #237	; 0xed
 8000bc4:	22ed      	movs	r2, #237	; 0xed
 8000bc6:	2151      	movs	r1, #81	; 0x51
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f001 fadd 	bl	8002188 <ST7789_DrawRectangle>

    HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin,GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <mytftset+0xf0>)
 8000bd6:	f002 fdac 	bl	8003732 <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	08005bac 	.word	0x08005bac
 8000be8:	20000008 	.word	0x20000008
 8000bec:	08005bb8 	.word	0x08005bb8
 8000bf0:	08005bc4 	.word	0x08005bc4
 8000bf4:	40010c00 	.word	0x40010c00

08000bf8 <encoder>:

void encoder(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af04      	add	r7, sp, #16
	if(set0==1){
 8000bfe:	4b99      	ldr	r3, [pc, #612]	; (8000e64 <encoder+0x26c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d106      	bne.n	8000c14 <encoder+0x1c>
		TIM2->CNT = 0;
 8000c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
    	set0=0;
 8000c0e:	4b95      	ldr	r3, [pc, #596]	; (8000e64 <encoder+0x26c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
    }
    int32_t currCounter = TIM2->CNT;
 8000c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(currCounter != prevCounter) {
 8000c1c:	4b92      	ldr	r3, [pc, #584]	; (8000e68 <encoder+0x270>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f000 80c0 	beq.w	8000da8 <encoder+0x1b0>
    	 prevCounter = currCounter;
 8000c28:	4a8f      	ldr	r2, [pc, #572]	; (8000e68 <encoder+0x270>)
 8000c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c2c:	6013      	str	r3, [r2, #0]
    	 stopset = 1;
 8000c2e:	4b8f      	ldr	r3, [pc, #572]	; (8000e6c <encoder+0x274>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
    if(menun==0){//паяльника температура
 8000c34:	4b8e      	ldr	r3, [pc, #568]	; (8000e70 <encoder+0x278>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d134      	bne.n	8000ca6 <encoder+0xae>
    currCounter=(currCounter + minTemp)/crocEncode;
 8000c3c:	4b8d      	ldr	r3, [pc, #564]	; (8000e74 <encoder+0x27c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c42:	441a      	add	r2, r3
 8000c44:	4b8c      	ldr	r3, [pc, #560]	; (8000e78 <encoder+0x280>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    currCounter=currCounter*crocEncode;
 8000c4e:	4b8a      	ldr	r3, [pc, #552]	; (8000e78 <encoder+0x280>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(currCounter>maxTemp){
 8000c5a:	4b88      	ldr	r3, [pc, #544]	; (8000e7c <encoder+0x284>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dd02      	ble.n	8000c6a <encoder+0x72>
    	set0 = 1;
 8000c64:	4b7f      	ldr	r3, [pc, #508]	; (8000e64 <encoder+0x26c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
        }
    setTemp= currCounter + popravcaP;
 8000c6a:	4b85      	ldr	r3, [pc, #532]	; (8000e80 <encoder+0x288>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c70:	4413      	add	r3, r2
 8000c72:	4a84      	ldr	r2, [pc, #528]	; (8000e84 <encoder+0x28c>)
 8000c74:	6013      	str	r3, [r2, #0]
	 char buff[16];
	 snprintf(buff, sizeof(buff), "%d", currCounter);
 8000c76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7c:	4a82      	ldr	r2, [pc, #520]	; (8000e88 <encoder+0x290>)
 8000c7e:	2110      	movs	r1, #16
 8000c80:	f004 fb1a 	bl	80052b8 <sniprintf>
	 ST7789_WriteString(90, 35, buff ,Font_16x26, color_tekst, BLACK);
 8000c84:	4b81      	ldr	r3, [pc, #516]	; (8000e8c <encoder+0x294>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b81      	ldr	r3, [pc, #516]	; (8000e90 <encoder+0x298>)
 8000c8c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c90:	2000      	movs	r0, #0
 8000c92:	9002      	str	r0, [sp, #8]
 8000c94:	9201      	str	r2, [sp, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	9200      	str	r2, [sp, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	2123      	movs	r1, #35	; 0x23
 8000ca0:	205a      	movs	r0, #90	; 0x5a
 8000ca2:	f001 fb39 	bl	8002318 <ST7789_WriteString>

    }
    if(menun==1){//Фена температура
 8000ca6:	4b72      	ldr	r3, [pc, #456]	; (8000e70 <encoder+0x278>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d140      	bne.n	8000d30 <encoder+0x138>

    currCounter=(currCounter + minFen)/crocEncode;
 8000cae:	4b79      	ldr	r3, [pc, #484]	; (8000e94 <encoder+0x29c>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb4:	441a      	add	r2, r3
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <encoder+0x280>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    currCounter=currCounter*crocEncode;
 8000cc0:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <encoder+0x280>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc6:	fb02 f303 	mul.w	r3, r2, r3
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(currCounter>maxFen){
 8000ccc:	4b72      	ldr	r3, [pc, #456]	; (8000e98 <encoder+0x2a0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	dd02      	ble.n	8000cdc <encoder+0xe4>
    	set0 = 1;
 8000cd6:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <encoder+0x26c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
    }
    setFen= currCounter + popravcaF;
 8000cdc:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <encoder+0x2a4>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a6e      	ldr	r2, [pc, #440]	; (8000ea0 <encoder+0x2a8>)
 8000ce6:	6013      	str	r3, [r2, #0]
    char buff[16];
   	 snprintf(buff, sizeof(buff), "%d*C", currCounter);
 8000ce8:	f107 0014 	add.w	r0, r7, #20
 8000cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cee:	4a6d      	ldr	r2, [pc, #436]	; (8000ea4 <encoder+0x2ac>)
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	f004 fae1 	bl	80052b8 <sniprintf>
   	 ST7789_WriteString(90, 115, buff ,Font_16x26, color_tekst, BLACK);
 8000cf6:	4b65      	ldr	r3, [pc, #404]	; (8000e8c <encoder+0x294>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b64      	ldr	r3, [pc, #400]	; (8000e90 <encoder+0x298>)
 8000cfe:	f107 0114 	add.w	r1, r7, #20
 8000d02:	2000      	movs	r0, #0
 8000d04:	9002      	str	r0, [sp, #8]
 8000d06:	9201      	str	r2, [sp, #4]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	9200      	str	r2, [sp, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	460a      	mov	r2, r1
 8000d10:	2173      	movs	r1, #115	; 0x73
 8000d12:	205a      	movs	r0, #90	; 0x5a
 8000d14:	f001 fb00 	bl	8002318 <ST7789_WriteString>
   	  if(setFen<99)ST7789_DrawFilledRectangle(90+16*4, 115,16,26,BLACK);//BLACK
 8000d18:	4b61      	ldr	r3, [pc, #388]	; (8000ea0 <encoder+0x2a8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b62      	cmp	r3, #98	; 0x62
 8000d1e:	dc07      	bgt.n	8000d30 <encoder+0x138>
 8000d20:	2300      	movs	r3, #0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	231a      	movs	r3, #26
 8000d26:	2210      	movs	r2, #16
 8000d28:	2173      	movs	r1, #115	; 0x73
 8000d2a:	209a      	movs	r0, #154	; 0x9a
 8000d2c:	f001 fb48 	bl	80023c0 <ST7789_DrawFilledRectangle>
    }
    if(menun==2 && fanflag==1){//Фена поток
 8000d30:	4b4f      	ldr	r3, [pc, #316]	; (8000e70 <encoder+0x278>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d137      	bne.n	8000da8 <encoder+0x1b0>
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <encoder+0x2b0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d133      	bne.n	8000da8 <encoder+0x1b0>
        currCounter=(currCounter + minAir)/crocEncode;
 8000d40:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <encoder+0x2b4>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d46:	441a      	add	r2, r3
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <encoder+0x280>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        currCounter=currCounter*crocEncode;
 8000d52:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <encoder+0x280>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	fb02 f303 	mul.w	r3, r2, r3
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(currCounter>100){
 8000d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d60:	2b64      	cmp	r3, #100	; 0x64
 8000d62:	dd02      	ble.n	8000d6a <encoder+0x172>
           set0=1;
 8000d64:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <encoder+0x26c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
           }
       // if(currCounter<30)
        setAir = currCounter;
 8000d6a:	4a51      	ldr	r2, [pc, #324]	; (8000eb0 <encoder+0x2b8>)
 8000d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d6e:	6013      	str	r3, [r2, #0]
       setPWM(setAir);
 8000d70:	4b4f      	ldr	r3, [pc, #316]	; (8000eb0 <encoder+0x2b8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fae0 	bl	800133c <setPWM>
        char buff[16];
       	 snprintf(buff, sizeof(buff), "%d ", currCounter);
 8000d7c:	1d38      	adds	r0, r7, #4
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d80:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <encoder+0x2bc>)
 8000d82:	2110      	movs	r1, #16
 8000d84:	f004 fa98 	bl	80052b8 <sniprintf>
       	 ST7789_WriteString(90, 175, buff ,Font_16x26, color_tekst, BLACK);
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <encoder+0x294>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <encoder+0x298>)
 8000d90:	1d39      	adds	r1, r7, #4
 8000d92:	2000      	movs	r0, #0
 8000d94:	9002      	str	r0, [sp, #8]
 8000d96:	9201      	str	r2, [sp, #4]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	9200      	str	r2, [sp, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	460a      	mov	r2, r1
 8000da0:	21af      	movs	r1, #175	; 0xaf
 8000da2:	205a      	movs	r0, #90	; 0x5a
 8000da4:	f001 fab8 	bl	8002318 <ST7789_WriteString>
        }
   // currCounterz = currCounter;
    }
    //BATN
    uint32_t ms = HAL_GetTick();
 8000da8:	f001 fdda 	bl	8002960 <HAL_GetTick>
 8000dac:	63b8      	str	r0, [r7, #56]	; 0x38
    uint8_t key1_state = HAL_GPIO_ReadPin(BATN_GPIO_Port, BATN_Pin); // подставить свой пин
 8000dae:	2110      	movs	r1, #16
 8000db0:	4841      	ldr	r0, [pc, #260]	; (8000eb8 <encoder+0x2c0>)
 8000db2:	f002 fca7 	bl	8003704 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if(key1_state == 0 && !short_state && (ms - time_key1) > 50)
 8000dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d113      	bne.n	8000dec <encoder+0x1f4>
 8000dc4:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <encoder+0x2c4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10f      	bne.n	8000dec <encoder+0x1f4>
 8000dcc:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <encoder+0x2c8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b32      	cmp	r3, #50	; 0x32
 8000dd6:	d909      	bls.n	8000dec <encoder+0x1f4>
    {
      short_state = 1;
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <encoder+0x2c4>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
      long_state = 0;
 8000dde:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <encoder+0x2cc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
      time_key1 = ms;
 8000de4:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <encoder+0x2c8>)
 8000de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e193      	b.n	8001114 <encoder+0x51c>
    }
    else if(key1_state == 0 && !long_state && (ms - time_key1) > 400)
 8000dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f040 80d4 	bne.w	8000f9e <encoder+0x3a6>
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <encoder+0x2cc>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 80cf 	bne.w	8000f9e <encoder+0x3a6>
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <encoder+0x2c8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e0c:	f240 80c7 	bls.w	8000f9e <encoder+0x3a6>
    {
      long_state = 1;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <encoder+0x2cc>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
     // действие на длинное нажатие
     if(menun==0){
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <encoder+0x278>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d174      	bne.n	8000f08 <encoder+0x310>

    	 if(pflag==1){
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <encoder+0x2d0>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d152      	bne.n	8000ecc <encoder+0x2d4>
    		 pflag=0;
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <encoder+0x2d0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
    		 ST7789_DrawRectangle(1, 1, 238, 79, WHITE);
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	234f      	movs	r3, #79	; 0x4f
 8000e34:	22ee      	movs	r2, #238	; 0xee
 8000e36:	2101      	movs	r1, #1
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f001 f9a5 	bl	8002188 <ST7789_DrawRectangle>
    		 ST7789_DrawRectangle(0, 0, 238, 80, WHITE);
 8000e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2350      	movs	r3, #80	; 0x50
 8000e46:	22ee      	movs	r2, #238	; 0xee
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f001 f99c 	bl	8002188 <ST7789_DrawRectangle>
    		 ST7789_DrawRectangle(2, 2, 237, 78, WHITE);
 8000e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	234e      	movs	r3, #78	; 0x4e
 8000e58:	22ed      	movs	r2, #237	; 0xed
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f001 f993 	bl	8002188 <ST7789_DrawRectangle>
 8000e62:	e051      	b.n	8000f08 <encoder+0x310>
 8000e64:	200000d5 	.word	0x200000d5
 8000e68:	200000c8 	.word	0x200000c8
 8000e6c:	200000d3 	.word	0x200000d3
 8000e70:	200000d2 	.word	0x200000d2
 8000e74:	20000014 	.word	0x20000014
 8000e78:	2000001c 	.word	0x2000001c
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	20000018 	.word	0x20000018
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	08005bcc 	.word	0x08005bcc
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000028 	.word	0x20000028
 8000e98:	20000024 	.word	0x20000024
 8000e9c:	200000c4 	.word	0x200000c4
 8000ea0:	20000020 	.word	0x20000020
 8000ea4:	08005bd0 	.word	0x08005bd0
 8000ea8:	200000d4 	.word	0x200000d4
 8000eac:	20000030 	.word	0x20000030
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	08005bd8 	.word	0x08005bd8
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	200000d0 	.word	0x200000d0
 8000ec0:	200000cc 	.word	0x200000cc
 8000ec4:	200000d1 	.word	0x200000d1
 8000ec8:	200000d6 	.word	0x200000d6
    	 }
    	 else {
    		 pflag=1;
 8000ecc:	4b93      	ldr	r3, [pc, #588]	; (800111c <encoder+0x524>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
    		 ST7789_DrawRectangle(1, 1, 238, 79, myred);
 8000ed2:	f64f 1365 	movw	r3, #63845	; 0xf965
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	234f      	movs	r3, #79	; 0x4f
 8000eda:	22ee      	movs	r2, #238	; 0xee
 8000edc:	2101      	movs	r1, #1
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 f952 	bl	8002188 <ST7789_DrawRectangle>
    		 ST7789_DrawRectangle(0, 0, 238, 80, MAGENTA);
 8000ee4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2350      	movs	r3, #80	; 0x50
 8000eec:	22ee      	movs	r2, #238	; 0xee
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f001 f949 	bl	8002188 <ST7789_DrawRectangle>
    		 ST7789_DrawRectangle(2, 2, 237, 78, myred);
 8000ef6:	f64f 1365 	movw	r3, #63845	; 0xf965
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	234e      	movs	r3, #78	; 0x4e
 8000efe:	22ed      	movs	r2, #237	; 0xed
 8000f00:	2102      	movs	r1, #2
 8000f02:	2002      	movs	r0, #2
 8000f04:	f001 f940 	bl	8002188 <ST7789_DrawRectangle>
    	 }
     }
     if(menun==1 || menun==2){
 8000f08:	4b85      	ldr	r3, [pc, #532]	; (8001120 <encoder+0x528>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d004      	beq.n	8000f1a <encoder+0x322>
 8000f10:	4b83      	ldr	r3, [pc, #524]	; (8001120 <encoder+0x528>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	f040 80fc 	bne.w	8001112 <encoder+0x51a>
    	 if(fanflag==1){
 8000f1a:	4b82      	ldr	r3, [pc, #520]	; (8001124 <encoder+0x52c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d11e      	bne.n	8000f60 <encoder+0x368>
    		 fanflag=0;
 8000f22:	4b80      	ldr	r3, [pc, #512]	; (8001124 <encoder+0x52c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    		 	ST7789_DrawRectangle(1, 81, 238, 238, WHITE);
 8000f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	23ee      	movs	r3, #238	; 0xee
 8000f30:	22ee      	movs	r2, #238	; 0xee
 8000f32:	2151      	movs	r1, #81	; 0x51
 8000f34:	2001      	movs	r0, #1
 8000f36:	f001 f927 	bl	8002188 <ST7789_DrawRectangle>
    		 	ST7789_DrawRectangle(0, 81, 239, 239, WHITE);
 8000f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	23ef      	movs	r3, #239	; 0xef
 8000f42:	22ef      	movs	r2, #239	; 0xef
 8000f44:	2151      	movs	r1, #81	; 0x51
 8000f46:	2000      	movs	r0, #0
 8000f48:	f001 f91e 	bl	8002188 <ST7789_DrawRectangle>
    		 	ST7789_DrawRectangle(2, 81, 237, 237, WHITE);
 8000f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	23ed      	movs	r3, #237	; 0xed
 8000f54:	22ed      	movs	r2, #237	; 0xed
 8000f56:	2151      	movs	r1, #81	; 0x51
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f001 f915 	bl	8002188 <ST7789_DrawRectangle>
     if(menun==1 || menun==2){
 8000f5e:	e0d8      	b.n	8001112 <encoder+0x51a>
    	 }
    	 else{
    		 fanflag=1;
 8000f60:	4b70      	ldr	r3, [pc, #448]	; (8001124 <encoder+0x52c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
    		 	ST7789_DrawRectangle(1, 81, 238, 238, myred);
 8000f66:	f64f 1365 	movw	r3, #63845	; 0xf965
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	23ee      	movs	r3, #238	; 0xee
 8000f6e:	22ee      	movs	r2, #238	; 0xee
 8000f70:	2151      	movs	r1, #81	; 0x51
 8000f72:	2001      	movs	r0, #1
 8000f74:	f001 f908 	bl	8002188 <ST7789_DrawRectangle>
    		 	ST7789_DrawRectangle(0, 81, 239, 239, myred);
 8000f78:	f64f 1365 	movw	r3, #63845	; 0xf965
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	23ef      	movs	r3, #239	; 0xef
 8000f80:	22ef      	movs	r2, #239	; 0xef
 8000f82:	2151      	movs	r1, #81	; 0x51
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 f8ff 	bl	8002188 <ST7789_DrawRectangle>
    		 	ST7789_DrawRectangle(2, 81, 237, 237, myred);
 8000f8a:	f64f 1365 	movw	r3, #63845	; 0xf965
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	23ed      	movs	r3, #237	; 0xed
 8000f92:	22ed      	movs	r2, #237	; 0xed
 8000f94:	2151      	movs	r1, #81	; 0x51
 8000f96:	2002      	movs	r0, #2
 8000f98:	f001 f8f6 	bl	8002188 <ST7789_DrawRectangle>
     if(menun==1 || menun==2){
 8000f9c:	e0b9      	b.n	8001112 <encoder+0x51a>
    	 }
     }
    }
    else if(key1_state == 1 && short_state && (ms - time_key1) > 50)
 8000f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	f040 80b6 	bne.w	8001114 <encoder+0x51c>
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <encoder+0x530>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80b1 	beq.w	8001114 <encoder+0x51c>
 8000fb2:	4b5e      	ldr	r3, [pc, #376]	; (800112c <encoder+0x534>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b32      	cmp	r3, #50	; 0x32
 8000fbc:	f240 80aa 	bls.w	8001114 <encoder+0x51c>
    {
      short_state = 0;
 8000fc0:	4b59      	ldr	r3, [pc, #356]	; (8001128 <encoder+0x530>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
      time_key1 = ms;
 8000fc6:	4a59      	ldr	r2, [pc, #356]	; (800112c <encoder+0x534>)
 8000fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fca:	6013      	str	r3, [r2, #0]

      if(!long_state)
 8000fcc:	4b58      	ldr	r3, [pc, #352]	; (8001130 <encoder+0x538>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 809f 	bne.w	8001114 <encoder+0x51c>
      {
    menun++;
 8000fd6:	4b52      	ldr	r3, [pc, #328]	; (8001120 <encoder+0x528>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <encoder+0x528>)
 8000fe0:	701a      	strb	r2, [r3, #0]
    if (menun==3)menun=0; // действие на короткое нажатие
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <encoder+0x528>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d102      	bne.n	8000ff0 <encoder+0x3f8>
 8000fea:	4b4d      	ldr	r3, [pc, #308]	; (8001120 <encoder+0x528>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

    if(menun==0){
 8000ff0:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <encoder+0x528>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d12b      	bne.n	8001050 <encoder+0x458>
    	ST7789_WriteString(35, 5, "HEATER_TEMP", Font_16x26, GREEN, BLACK);
 8000ff8:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <encoder+0x53c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	9202      	str	r2, [sp, #8]
 8000ffe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001002:	9201      	str	r2, [sp, #4]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	9200      	str	r2, [sp, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <encoder+0x540>)
 800100c:	2105      	movs	r1, #5
 800100e:	2023      	movs	r0, #35	; 0x23
 8001010:	f001 f982 	bl	8002318 <ST7789_WriteString>
    	ST7789_WriteString(60, 84, "FEN_TEMP", Font_16x26, color_tekst, BLACK);
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <encoder+0x544>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <encoder+0x53c>)
 800101c:	2100      	movs	r1, #0
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <encoder+0x548>)
 800102a:	2154      	movs	r1, #84	; 0x54
 800102c:	203c      	movs	r0, #60	; 0x3c
 800102e:	f001 f973 	bl	8002318 <ST7789_WriteString>
    	ST7789_WriteString(65, 140, "AIRFLOW", Font_16x26, color_tekst, BLACK);
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <encoder+0x544>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <encoder+0x53c>)
 800103a:	2100      	movs	r1, #0
 800103c:	9102      	str	r1, [sp, #8]
 800103e:	9201      	str	r2, [sp, #4]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	9200      	str	r2, [sp, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a3f      	ldr	r2, [pc, #252]	; (8001144 <encoder+0x54c>)
 8001048:	218c      	movs	r1, #140	; 0x8c
 800104a:	2041      	movs	r0, #65	; 0x41
 800104c:	f001 f964 	bl	8002318 <ST7789_WriteString>
    }
	if(menun==1){
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <encoder+0x528>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d12b      	bne.n	80010b0 <encoder+0x4b8>
		 ST7789_WriteString(35, 5, "HEATER_TEMP", Font_16x26, color_tekst, BLACK);
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <encoder+0x544>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <encoder+0x53c>)
 8001060:	2100      	movs	r1, #0
 8001062:	9102      	str	r1, [sp, #8]
 8001064:	9201      	str	r2, [sp, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a32      	ldr	r2, [pc, #200]	; (8001138 <encoder+0x540>)
 800106e:	2105      	movs	r1, #5
 8001070:	2023      	movs	r0, #35	; 0x23
 8001072:	f001 f951 	bl	8002318 <ST7789_WriteString>
		 ST7789_WriteString(60, 84, "FEN_TEMP", Font_16x26, GREEN, BLACK);
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <encoder+0x53c>)
 8001078:	2200      	movs	r2, #0
 800107a:	9202      	str	r2, [sp, #8]
 800107c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001080:	9201      	str	r2, [sp, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <encoder+0x548>)
 800108a:	2154      	movs	r1, #84	; 0x54
 800108c:	203c      	movs	r0, #60	; 0x3c
 800108e:	f001 f943 	bl	8002318 <ST7789_WriteString>
		 ST7789_WriteString(65, 140, "AIRFLOW", Font_16x26, color_tekst, BLACK);
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <encoder+0x544>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <encoder+0x53c>)
 800109a:	2100      	movs	r1, #0
 800109c:	9102      	str	r1, [sp, #8]
 800109e:	9201      	str	r2, [sp, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <encoder+0x54c>)
 80010a8:	218c      	movs	r1, #140	; 0x8c
 80010aa:	2041      	movs	r0, #65	; 0x41
 80010ac:	f001 f934 	bl	8002318 <ST7789_WriteString>
	 }
	 if(menun==2){
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <encoder+0x528>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d12d      	bne.n	8001114 <encoder+0x51c>
		 ST7789_WriteString(35, 5, "HEATER_TEMP", Font_16x26, color_tekst, BLACK);
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <encoder+0x544>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <encoder+0x53c>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	9102      	str	r1, [sp, #8]
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <encoder+0x540>)
 80010ce:	2105      	movs	r1, #5
 80010d0:	2023      	movs	r0, #35	; 0x23
 80010d2:	f001 f921 	bl	8002318 <ST7789_WriteString>
		 ST7789_WriteString(60, 84, "FEN_TEMP", Font_16x26, color_tekst, BLACK);
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <encoder+0x544>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <encoder+0x53c>)
 80010de:	2100      	movs	r1, #0
 80010e0:	9102      	str	r1, [sp, #8]
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <encoder+0x548>)
 80010ec:	2154      	movs	r1, #84	; 0x54
 80010ee:	203c      	movs	r0, #60	; 0x3c
 80010f0:	f001 f912 	bl	8002318 <ST7789_WriteString>
		 ST7789_WriteString(65, 140, "AIRFLOW", Font_16x26, GREEN, BLACK);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <encoder+0x53c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	9202      	str	r2, [sp, #8]
 80010fa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010fe:	9201      	str	r2, [sp, #4]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	9200      	str	r2, [sp, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <encoder+0x54c>)
 8001108:	218c      	movs	r1, #140	; 0x8c
 800110a:	2041      	movs	r0, #65	; 0x41
 800110c:	f001 f904 	bl	8002318 <ST7789_WriteString>
	 }

      }
    }
}
 8001110:	e000      	b.n	8001114 <encoder+0x51c>
     if(menun==1 || menun==2){
 8001112:	bf00      	nop
}
 8001114:	bf00      	nop
 8001116:	3740      	adds	r7, #64	; 0x40
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000d6 	.word	0x200000d6
 8001120:	200000d2 	.word	0x200000d2
 8001124:	200000d4 	.word	0x200000d4
 8001128:	200000d0 	.word	0x200000d0
 800112c:	200000cc 	.word	0x200000cc
 8001130:	200000d1 	.word	0x200000d1
 8001134:	20000000 	.word	0x20000000
 8001138:	08005bac 	.word	0x08005bac
 800113c:	20000008 	.word	0x20000008
 8001140:	08005bb8 	.word	0x08005bb8
 8001144:	08005bc4 	.word	0x08005bc4

08001148 <TermoControl>:

void TermoControl(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
if(pflag==1){
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <TermoControl+0x194>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d125      	bne.n	80011a2 <TermoControl+0x5a>
if(setTemp<=adcResult){//нгрів паяльник
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <TermoControl+0x198>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fbe8 	bl	8000930 <__aeabi_i2f>
 8001160:	4602      	mov	r2, r0
 8001162:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <TermoControl+0x19c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff fc8d 	bl	8000a88 <__aeabi_fcmple>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <TermoControl+0x44>
	HAL_GPIO_WritePin(heatp_GPIO_Port, heatp_Pin,GPIO_PIN_SET);//pb5
 8001174:	2201      	movs	r2, #1
 8001176:	2120      	movs	r1, #32
 8001178:	485b      	ldr	r0, [pc, #364]	; (80012e8 <TermoControl+0x1a0>)
 800117a:	f002 fada 	bl	8003732 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin,GPIO_PIN_RESET);//pa8
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001184:	4859      	ldr	r0, [pc, #356]	; (80012ec <TermoControl+0x1a4>)
 8001186:	f002 fad4 	bl	8003732 <HAL_GPIO_WritePin>
 800118a:	e00a      	b.n	80011a2 <TermoControl+0x5a>
}
else {
	HAL_GPIO_WritePin(heatp_GPIO_Port, heatp_Pin,GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
 8001190:	4855      	ldr	r0, [pc, #340]	; (80012e8 <TermoControl+0x1a0>)
 8001192:	f002 face 	bl	8003732 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin,GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	4853      	ldr	r0, [pc, #332]	; (80012ec <TermoControl+0x1a4>)
 800119e:	f002 fac8 	bl	8003732 <HAL_GPIO_WritePin>
}
}
if (pflag==0){
 80011a2:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <TermoControl+0x194>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10a      	bne.n	80011c0 <TermoControl+0x78>
	HAL_GPIO_WritePin(heatp_GPIO_Port, heatp_Pin,GPIO_PIN_SET);//pb5
 80011aa:	2201      	movs	r2, #1
 80011ac:	2120      	movs	r1, #32
 80011ae:	484e      	ldr	r0, [pc, #312]	; (80012e8 <TermoControl+0x1a0>)
 80011b0:	f002 fabf 	bl	8003732 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin,GPIO_PIN_RESET);//pa8
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ba:	484c      	ldr	r0, [pc, #304]	; (80012ec <TermoControl+0x1a4>)
 80011bc:	f002 fab9 	bl	8003732 <HAL_GPIO_WritePin>
}
//uint8_t culoff = 0;
if (fanflag==0){
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <TermoControl+0x1a8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d14a      	bne.n	800125e <TermoControl+0x116>
	fenreset();
 80011c8:	f000 f8a4 	bl	8001314 <fenreset>
	flagfn=0;
 80011cc:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <TermoControl+0x1ac>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	if(adcResultf>(minFen+30)){
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <TermoControl+0x1b0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	331e      	adds	r3, #30
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fba9 	bl	8000930 <__aeabi_i2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <TermoControl+0x1b4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4610      	mov	r0, r2
 80011e8:	f7ff fc44 	bl	8000a74 <__aeabi_fcmplt>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d012      	beq.n	8001218 <TermoControl+0xd0>
		uint8_t flagfn=1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
		if(flagfn != culofn){
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <TermoControl+0x1b8>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d00b      	beq.n	8001218 <TermoControl+0xd0>
		culofn=flagfn;
 8001200:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <TermoControl+0x1b8>)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	7013      	strb	r3, [r2, #0]
		setAir=100;
 8001206:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <TermoControl+0x1bc>)
 8001208:	2264      	movs	r2, #100	; 0x64
 800120a:	601a      	str	r2, [r3, #0]
		setPWM(setAir);
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <TermoControl+0x1bc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f892 	bl	800133c <setPWM>
		}
	}

if(adcResultf<(minFen+20)){
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <TermoControl+0x1b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3314      	adds	r3, #20
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fb86 	bl	8000930 <__aeabi_i2f>
 8001224:	4602      	mov	r2, r0
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <TermoControl+0x1b4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	4610      	mov	r0, r2
 800122e:	f7ff fc3f 	bl	8000ab0 <__aeabi_fcmpgt>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d012      	beq.n	800125e <TermoControl+0x116>
	uint8_t flagff=1;
 8001238:	2301      	movs	r3, #1
 800123a:	71bb      	strb	r3, [r7, #6]
	  if(flagff != culoff) {
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <TermoControl+0x1c0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	79ba      	ldrb	r2, [r7, #6]
 8001242:	429a      	cmp	r2, r3
 8001244:	d00b      	beq.n	800125e <TermoControl+0x116>
	culoff=flagff;
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <TermoControl+0x1c0>)
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	7013      	strb	r3, [r2, #0]
		setAir=0;
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <TermoControl+0x1bc>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
	setPWM(setAir);
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <TermoControl+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f86f 	bl	800133c <setPWM>
	//culoff=0;
	  }

}}
if (fanflag==1){
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <TermoControl+0x1a8>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d136      	bne.n	80012d4 <TermoControl+0x18c>
	culoff=0;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <TermoControl+0x1c0>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	culofn=0;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <TermoControl+0x1b8>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	uint8_t flagf=1;
 8001272:	2301      	movs	r3, #1
 8001274:	717b      	strb	r3, [r7, #5]
	if(flagf != flagfn){
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <TermoControl+0x1ac>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	797a      	ldrb	r2, [r7, #5]
 800127c:	429a      	cmp	r2, r3
 800127e:	d00b      	beq.n	8001298 <TermoControl+0x150>
	flagfn=flagf;
 8001280:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <TermoControl+0x1ac>)
 8001282:	797b      	ldrb	r3, [r7, #5]
 8001284:	7013      	strb	r3, [r2, #0]
	setAir=50;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <TermoControl+0x1bc>)
 8001288:	2232      	movs	r2, #50	; 0x32
 800128a:	601a      	str	r2, [r3, #0]
    setPWM(setAir);
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <TermoControl+0x1bc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f852 	bl	800133c <setPWM>
	}
if(setFen<=adcResultf){//агрів фену !!!220V!!!
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <TermoControl+0x1c4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fb47 	bl	8000930 <__aeabi_i2f>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <TermoControl+0x1b4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f7ff fbec 	bl	8000a88 <__aeabi_fcmple>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <TermoControl+0x174>
fenreset();
 80012b6:	f000 f82d 	bl	8001314 <fenreset>
else{

	HAL_GPIO_WritePin(FEN_GPIO_Port, FEN_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
}}
}
 80012ba:	e00b      	b.n	80012d4 <TermoControl+0x18c>
	HAL_GPIO_WritePin(FEN_GPIO_Port, FEN_Pin,GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <TermoControl+0x1a0>)
 80012c4:	f002 fa35 	bl	8003732 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ce:	4810      	ldr	r0, [pc, #64]	; (8001310 <TermoControl+0x1c8>)
 80012d0:	f002 fa2f 	bl	8003732 <HAL_GPIO_WritePin>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000d6 	.word	0x200000d6
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	200001b8 	.word	0x200001b8
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40010800 	.word	0x40010800
 80012f0:	200000d4 	.word	0x200000d4
 80012f4:	200000d7 	.word	0x200000d7
 80012f8:	20000028 	.word	0x20000028
 80012fc:	20000240 	.word	0x20000240
 8001300:	200000d8 	.word	0x200000d8
 8001304:	2000002c 	.word	0x2000002c
 8001308:	200000d9 	.word	0x200000d9
 800130c:	20000020 	.word	0x20000020
 8001310:	40011000 	.word	0x40011000

08001314 <fenreset>:

void fenreset(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(FEN_GPIO_Port, FEN_Pin,GPIO_PIN_RESET);//pb9
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <fenreset+0x20>)
 8001320:	f002 fa07 	bl	8003732 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);//pc13
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <fenreset+0x24>)
 800132c:	f002 fa01 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40011000 	.word	0x40011000

0800133c <setPWM>:

void setPWM(uint16_t value)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
    int set = (6000*value)/100;
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	60fb      	str	r3, [r7, #12]
    TIM4->CCR1 = set;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <setPWM+0x28>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40000800 	.word	0x40000800

08001368 <menu>:

void menu(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	b0a8      	sub	sp, #160	; 0xa0
 800136c:	af04      	add	r7, sp, #16
	if(stopset==0){//паяльника температура
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <menu+0x178>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d142      	bne.n	80013fc <menu+0x94>
	    if(adcResult<600){
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <menu+0x17c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	495b      	ldr	r1, [pc, #364]	; (80014e8 <menu+0x180>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb79 	bl	8000a74 <__aeabi_fcmplt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01d      	beq.n	80013c4 <menu+0x5c>
		char buf[128];
		sprintf(buf, "%d*C ", ((uint32_t)adcResult-popravcaP));//
 8001388:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <menu+0x17c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fb99 	bl	8000ac4 <__aeabi_f2uiz>
 8001392:	4603      	mov	r3, r0
 8001394:	4a55      	ldr	r2, [pc, #340]	; (80014ec <menu+0x184>)
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	1a9a      	subs	r2, r3, r2
 800139a:	463b      	mov	r3, r7
 800139c:	4954      	ldr	r1, [pc, #336]	; (80014f0 <menu+0x188>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 ffbe 	bl	8005320 <siprintf>
		ST7789_WriteString(90, 35, buf ,Font_16x26, color_tekst, BLACK);
 80013a4:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <menu+0x18c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <menu+0x190>)
 80013ac:	4639      	mov	r1, r7
 80013ae:	2000      	movs	r0, #0
 80013b0:	9002      	str	r0, [sp, #8]
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	460a      	mov	r2, r1
 80013bc:	2123      	movs	r1, #35	; 0x23
 80013be:	205a      	movs	r0, #90	; 0x5a
 80013c0:	f000 ffaa 	bl	8002318 <ST7789_WriteString>
	    }
		if(adcResult>600){
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <menu+0x17c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4947      	ldr	r1, [pc, #284]	; (80014e8 <menu+0x180>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb70 	bl	8000ab0 <__aeabi_fcmpgt>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d012      	beq.n	80013fc <menu+0x94>
			ST7789_WriteString(90, 35, "NO   " ,Font_16x26, RED, BLACK);
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <menu+0x190>)
 80013d8:	2200      	movs	r2, #0
 80013da:	9202      	str	r2, [sp, #8]
 80013dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80013e0:	9201      	str	r2, [sp, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	9200      	str	r2, [sp, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <menu+0x194>)
 80013ea:	2123      	movs	r1, #35	; 0x23
 80013ec:	205a      	movs	r0, #90	; 0x5a
 80013ee:	f000 ff93 	bl	8002318 <ST7789_WriteString>
			HAL_GPIO_WritePin(heatp_GPIO_Port, heatp_Pin,GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	4842      	ldr	r0, [pc, #264]	; (8001500 <menu+0x198>)
 80013f8:	f002 f99b 	bl	8003732 <HAL_GPIO_WritePin>
	    }
	}
	if(stopset==0){//Фена температура
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <menu+0x178>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d143      	bne.n	800148c <menu+0x124>
		if(adcResultf<600){
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <menu+0x19c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <menu+0x180>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fb32 	bl	8000a74 <__aeabi_fcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01d      	beq.n	8001452 <menu+0xea>
		char buff[128];
		sprintf(buff, "%d*C ", ((uint32_t)adcResultf-popravcaF));//
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <menu+0x19c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb52 	bl	8000ac4 <__aeabi_f2uiz>
 8001420:	4603      	mov	r3, r0
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <menu+0x1a0>)
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	1a9a      	subs	r2, r3, r2
 8001428:	463b      	mov	r3, r7
 800142a:	4931      	ldr	r1, [pc, #196]	; (80014f0 <menu+0x188>)
 800142c:	4618      	mov	r0, r3
 800142e:	f003 ff77 	bl	8005320 <siprintf>
		ST7789_WriteString(90, 115, buff ,Font_16x26, color_tekst, BLACK);
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <menu+0x18c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <menu+0x190>)
 800143a:	4639      	mov	r1, r7
 800143c:	2000      	movs	r0, #0
 800143e:	9002      	str	r0, [sp, #8]
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	9200      	str	r2, [sp, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	460a      	mov	r2, r1
 800144a:	2173      	movs	r1, #115	; 0x73
 800144c:	205a      	movs	r0, #90	; 0x5a
 800144e:	f000 ff63 	bl	8002318 <ST7789_WriteString>
		}
		if(adcResultf>600){
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <menu+0x19c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4924      	ldr	r1, [pc, #144]	; (80014e8 <menu+0x180>)
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fb29 	bl	8000ab0 <__aeabi_fcmpgt>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <menu+0x124>
		    ST7789_WriteString(90, 115, "NO   " ,Font_16x26, RED, BLACK);
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <menu+0x190>)
 8001466:	2200      	movs	r2, #0
 8001468:	9202      	str	r2, [sp, #8]
 800146a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <menu+0x194>)
 8001478:	2173      	movs	r1, #115	; 0x73
 800147a:	205a      	movs	r0, #90	; 0x5a
 800147c:	f000 ff4c 	bl	8002318 <ST7789_WriteString>
		    HAL_GPIO_WritePin(FEN_GPIO_Port, FEN_Pin,GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001486:	481e      	ldr	r0, [pc, #120]	; (8001500 <menu+0x198>)
 8001488:	f002 f953 	bl	8003732 <HAL_GPIO_WritePin>
		}

	}
	if(stopset==0){//поток повітря фена
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <menu+0x178>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d120      	bne.n	80014d6 <menu+0x16e>
        char buff[16];
       	 snprintf(buff, sizeof(buff), "%d", setAir);
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <menu+0x1a4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <menu+0x1a8>)
 800149e:	2110      	movs	r1, #16
 80014a0:	f003 ff0a 	bl	80052b8 <sniprintf>
       	 ST7789_DrawFilledRectangle(90+16, 175,48-16,26,BLACK);//BLACK
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	231a      	movs	r3, #26
 80014aa:	2220      	movs	r2, #32
 80014ac:	21af      	movs	r1, #175	; 0xaf
 80014ae:	206a      	movs	r0, #106	; 0x6a
 80014b0:	f000 ff86 	bl	80023c0 <ST7789_DrawFilledRectangle>
       	 ST7789_WriteString(90, 175, buff ,Font_16x26, color_tekst, BLACK);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <menu+0x18c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <menu+0x190>)
 80014bc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80014c0:	2000      	movs	r0, #0
 80014c2:	9002      	str	r0, [sp, #8]
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	460a      	mov	r2, r1
 80014ce:	21af      	movs	r1, #175	; 0xaf
 80014d0:	205a      	movs	r0, #90	; 0x5a
 80014d2:	f000 ff21 	bl	8002318 <ST7789_WriteString>

	}
}
 80014d6:	bf00      	nop
 80014d8:	3790      	adds	r7, #144	; 0x90
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000d3 	.word	0x200000d3
 80014e4:	200001b8 	.word	0x200001b8
 80014e8:	44160000 	.word	0x44160000
 80014ec:	20000018 	.word	0x20000018
 80014f0:	08005bdc 	.word	0x08005bdc
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000000 	.word	0x20000000
 80014fc:	08005be4 	.word	0x08005be4
 8001500:	40010c00 	.word	0x40010c00
 8001504:	20000240 	.word	0x20000240
 8001508:	200000c4 	.word	0x200000c4
 800150c:	2000002c 	.word	0x2000002c
 8001510:	08005bcc 	.word	0x08005bcc
 8001514:	00000000 	.word	0x00000000

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f001 f9c7 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f8dd 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 faa3 	bl	8001a70 <MX_GPIO_Init>
  MX_ADC1_Init();
 800152a:	f000 f935 	bl	8001798 <MX_ADC1_Init>
  MX_TIM2_Init();
 800152e:	f000 f9e5 	bl	80018fc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001532:	f000 fa43 	bl	80019bc <MX_TIM4_Init>
  MX_SPI2_Init();
 8001536:	f000 f9ab 	bl	8001890 <MX_SPI2_Init>
  MX_ADC2_Init();
 800153a:	f000 f96b 	bl	8001814 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 800153e:	f000 fc83 	bl	8001e48 <ST7789_Init>

  mytftset();
 8001542:	f7ff fadf 	bl	8000b04 <mytftset>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001546:	213c      	movs	r1, #60	; 0x3c
 8001548:	4859      	ldr	r0, [pc, #356]	; (80016b0 <main+0x198>)
 800154a:	f003 facb 	bl	8004ae4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	4858      	ldr	r0, [pc, #352]	; (80016b4 <main+0x19c>)
 8001552:	f003 f93d 	bl	80047d0 <HAL_TIM_PWM_Start_IT>
  setPWM(0);
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fef0 	bl	800133c <setPWM>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //if(d==10000||d==20000||d==40000||d==50000||d==60000){
      HAL_ADC_Start(&hadc1);
 800155c:	4856      	ldr	r0, [pc, #344]	; (80016b8 <main+0x1a0>)
 800155e:	f001 fb05 	bl	8002b6c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);
 8001562:	2164      	movs	r1, #100	; 0x64
 8001564:	4854      	ldr	r0, [pc, #336]	; (80016b8 <main+0x1a0>)
 8001566:	f001 fbdb 	bl	8002d20 <HAL_ADC_PollForConversion>
      int adcResultn = HAL_ADC_GetValue(&hadc1);
 800156a:	4853      	ldr	r0, [pc, #332]	; (80016b8 <main+0x1a0>)
 800156c:	f001 fcd2 	bl	8002f14 <HAL_ADC_GetValue>
 8001570:	4603      	mov	r3, r0
 8001572:	607b      	str	r3, [r7, #4]
      HAL_ADC_Stop(&hadc1);
 8001574:	4850      	ldr	r0, [pc, #320]	; (80016b8 <main+0x1a0>)
 8001576:	f001 fba7 	bl	8002cc8 <HAL_ADC_Stop>
      adcResult = ((adcResultn*((3.274/4096)*4))*100)-popravcaP;//(4096*5)
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff f864 	bl	8000648 <__aeabi_i2d>
 8001580:	a349      	add	r3, pc, #292	; (adr r3, 80016a8 <main+0x190>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe fde3 	bl	8000150 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <main+0x1a4>)
 8001598:	f7fe fdda 	bl	8000150 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4614      	mov	r4, r2
 80015a2:	461d      	mov	r5, r3
 80015a4:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <main+0x1a8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f84d 	bl	8000648 <__aeabi_i2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe fef9 	bl	80003ac <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f8ab 	bl	800071c <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a3e      	ldr	r2, [pc, #248]	; (80016c4 <main+0x1ac>)
 80015ca:	6013      	str	r3, [r2, #0]

      HAL_ADC_Start(&hadc2);
 80015cc:	483e      	ldr	r0, [pc, #248]	; (80016c8 <main+0x1b0>)
 80015ce:	f001 facd 	bl	8002b6c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc2, 100);
 80015d2:	2164      	movs	r1, #100	; 0x64
 80015d4:	483c      	ldr	r0, [pc, #240]	; (80016c8 <main+0x1b0>)
 80015d6:	f001 fba3 	bl	8002d20 <HAL_ADC_PollForConversion>
      int adcResultn1 = HAL_ADC_GetValue(&hadc2);
 80015da:	483b      	ldr	r0, [pc, #236]	; (80016c8 <main+0x1b0>)
 80015dc:	f001 fc9a 	bl	8002f14 <HAL_ADC_GetValue>
 80015e0:	4603      	mov	r3, r0
 80015e2:	603b      	str	r3, [r7, #0]
      HAL_ADC_Stop(&hadc2);
 80015e4:	4838      	ldr	r0, [pc, #224]	; (80016c8 <main+0x1b0>)
 80015e6:	f001 fb6f 	bl	8002cc8 <HAL_ADC_Stop>
      adcResultf = ((adcResultn1*((3.274/4096)*4))*100)-popravcaF;//дільник 4 після заміни резисторів
 80015ea:	6838      	ldr	r0, [r7, #0]
 80015ec:	f7ff f82c 	bl	8000648 <__aeabi_i2d>
 80015f0:	a32d      	add	r3, pc, #180	; (adr r3, 80016a8 <main+0x190>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7fe fdab 	bl	8000150 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <main+0x1a4>)
 8001608:	f7fe fda2 	bl	8000150 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4614      	mov	r4, r2
 8001612:	461d      	mov	r5, r3
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <main+0x1b4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f815 	bl	8000648 <__aeabi_i2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7fe fec1 	bl	80003ac <__aeabi_dsub>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff f873 	bl	800071c <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <main+0x1b8>)
 800163a:	6013      	str	r3, [r2, #0]

      if(d==9000||d==19000||d==29000){
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <main+0x1bc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f242 3228 	movw	r2, #9000	; 0x2328
 8001644:	4293      	cmp	r3, r2
 8001646:	d00b      	beq.n	8001660 <main+0x148>
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <main+0x1bc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f644 2238 	movw	r2, #19000	; 0x4a38
 8001650:	4293      	cmp	r3, r2
 8001652:	d005      	beq.n	8001660 <main+0x148>
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <main+0x1bc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f247 1248 	movw	r2, #29000	; 0x7148
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <main+0x14c>
	  menu();
 8001660:	f7ff fe82 	bl	8001368 <menu>
      }
	  encoder();
 8001664:	f7ff fac8 	bl	8000bf8 <encoder>
	  //setPWM(setAir);
//  setpwm();
	//  encoderinit();
	  if(d==30000){
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <main+0x1bc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001670:	4293      	cmp	r3, r2
 8001672:	d105      	bne.n	8001680 <main+0x168>
		stopset=0;
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <main+0x1c0>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		d=0;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <main+0x1bc>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
	  }
	  TermoControl();
 8001680:	f7ff fd62 	bl	8001148 <TermoControl>
    	  d++;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <main+0x1bc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <main+0x1bc>)
 800168c:	6013      	str	r3, [r2, #0]
    	  if(i==60000)i=0;
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <main+0x1c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001696:	4293      	cmp	r3, r2
 8001698:	f47f af60 	bne.w	800155c <main+0x44>
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <main+0x1c4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  {
 80016a2:	e75b      	b.n	800155c <main+0x44>
 80016a4:	f3af 8000 	nop.w
 80016a8:	e978d4fe 	.word	0xe978d4fe
 80016ac:	3f6a3126 	.word	0x3f6a3126
 80016b0:	200001f8 	.word	0x200001f8
 80016b4:	20000140 	.word	0x20000140
 80016b8:	200001bc 	.word	0x200001bc
 80016bc:	40590000 	.word	0x40590000
 80016c0:	20000018 	.word	0x20000018
 80016c4:	200001b8 	.word	0x200001b8
 80016c8:	20000188 	.word	0x20000188
 80016cc:	200000c4 	.word	0x200000c4
 80016d0:	20000240 	.word	0x20000240
 80016d4:	200001f4 	.word	0x200001f4
 80016d8:	200000d3 	.word	0x200000d3
 80016dc:	200001ec 	.word	0x200001ec

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fdda 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	2301      	movs	r3, #1
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	2302      	movs	r3, #2
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800172c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001736:	4618      	mov	r0, r3
 8001738:	f002 f814 	bl	8003764 <HAL_RCC_OscConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001742:	f000 fa65 	bl	8001c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001746:	230f      	movs	r3, #15
 8001748:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2102      	movs	r1, #2
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fa7e 	bl	8003c64 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800176e:	f000 fa4f 	bl	8001c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fbf6 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800178a:	f000 fa41 	bl	8001c10 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3750      	adds	r7, #80	; 0x50
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_ADC1_Init+0x74>)
 80017aa:	4a19      	ldr	r2, [pc, #100]	; (8001810 <MX_ADC1_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_ADC1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_ADC1_Init+0x74>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_ADC1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_ADC1_Init+0x74>)
 80017c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_ADC1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_ADC1_Init+0x74>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_ADC1_Init+0x74>)
 80017d6:	f001 f8f1 	bl	80029bc <HAL_ADC_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 fa16 	bl	8001c10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_ADC1_Init+0x74>)
 80017f6:	f001 fb99 	bl	8002f2c <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001800:	f000 fa06 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200001bc 	.word	0x200001bc
 8001810:	40012400 	.word	0x40012400

08001814 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_ADC2_Init+0x74>)
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <MX_ADC2_Init+0x78>)
 8001828:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MX_ADC2_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_ADC2_Init+0x74>)
 8001832:	2201      	movs	r2, #1
 8001834:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_ADC2_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_ADC2_Init+0x74>)
 800183e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001842:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_ADC2_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_ADC2_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_ADC2_Init+0x74>)
 8001852:	f001 f8b3 	bl	80029bc <HAL_ADC_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800185c:	f000 f9d8 	bl	8001c10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001860:	2301      	movs	r3, #1
 8001862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001864:	2301      	movs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_ADC2_Init+0x74>)
 8001872:	f001 fb5b 	bl	8002f2c <HAL_ADC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800187c:	f000 f9c8 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000188 	.word	0x20000188
 800188c:	40012800 	.word	0x40012800

08001890 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI2_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI2_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI2_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018e2:	f002 fcbf 	bl	8004264 <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018ec:	f000 f990 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200000e8 	.word	0x200000e8
 80018f8:	40003800 	.word	0x40003800

080018fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fccc 	bl	80052a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
//  htim2.Init.Period = maxTemp-minTemp;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MX_TIM2_Init+0xb8>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <MX_TIM2_Init+0xb8>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <MX_TIM2_Init+0xb8>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_TIM2_Init+0xb8>)
 800192e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <MX_TIM2_Init+0xb8>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_TIM2_Init+0xb8>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001940:	2303      	movs	r3, #3
 8001942:	60fb      	str	r3, [r7, #12]
  if(EncRot==1){
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM2_Init+0xbc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <MX_TIM2_Init+0x54>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  }
  if(EncRot==0){
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_TIM2_Init+0xbc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <MX_TIM2_Init+0x60>
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
  }
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	2301      	movs	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001964:	230f      	movs	r3, #15
 8001966:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001974:	230f      	movs	r3, #15
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4619      	mov	r1, r3
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_TIM2_Init+0xb8>)
 8001980:	f003 f80e 	bl	80049a0 <HAL_TIM_Encoder_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800198a:	f000 f941 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM2_Init+0xb8>)
 800199c:	f003 fbfc 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80019a6:	f000 f933 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001f8 	.word	0x200001f8
 80019b8:	20000034 	.word	0x20000034

080019bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <MX_TIM4_Init+0xac>)
 80019e0:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <MX_TIM4_Init+0xb0>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 69;
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <MX_TIM4_Init+0xac>)
 80019e6:	2245      	movs	r2, #69	; 0x45
 80019e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <MX_TIM4_Init+0xac>)
 80019ec:	2260      	movs	r2, #96	; 0x60
 80019ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6000;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_TIM4_Init+0xac>)
 80019f2:	f241 7270 	movw	r2, #6000	; 0x1770
 80019f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_TIM4_Init+0xac>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_TIM4_Init+0xac>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <MX_TIM4_Init+0xac>)
 8001a06:	f002 fe93 	bl	8004730 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001a10:	f000 f8fe 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_TIM4_Init+0xac>)
 8001a24:	f003 fbb8 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a2e:	f000 f8ef 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM4_Init+0xac>)
 8001a4a:	f003 f8d9 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001a54:	f000 f8dc 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM4_Init+0xac>)
 8001a5a:	f000 fe6d 	bl	8002738 <HAL_TIM_MspPostInit>

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000140 	.word	0x20000140
 8001a6c:	40000800 	.word	0x40000800

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a5d      	ldr	r2, [pc, #372]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9c:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001aa2:	f043 0320 	orr.w	r3, r3, #32
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b55      	ldr	r3, [pc, #340]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b52      	ldr	r3, [pc, #328]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <MX_GPIO_Init+0x190>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	4846      	ldr	r0, [pc, #280]	; (8001c04 <MX_GPIO_Init+0x194>)
 8001aec:	f001 fe21 	bl	8003732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLK_Pin|FEN_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001af6:	4844      	ldr	r0, [pc, #272]	; (8001c08 <MX_GPIO_Init+0x198>)
 8001af8:	f001 fe1b 	bl	8003732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_CS_Pin|heatp_Pin, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	f244 0120 	movw	r1, #16416	; 0x4020
 8001b02:	4841      	ldr	r0, [pc, #260]	; (8001c08 <MX_GPIO_Init+0x198>)
 8001b04:	f001 fe15 	bl	8003732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDD_Pin|ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001b0e:	483f      	ldr	r0, [pc, #252]	; (8001c0c <MX_GPIO_Init+0x19c>)
 8001b10:	f001 fe0f 	bl	8003732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4835      	ldr	r0, [pc, #212]	; (8001c04 <MX_GPIO_Init+0x194>)
 8001b2e:	f001 fc65 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b32:	2304      	movs	r3, #4
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	4831      	ldr	r0, [pc, #196]	; (8001c0c <MX_GPIO_Init+0x19c>)
 8001b46:	f001 fc59 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLK_Pin heatp_Pin FEN_Pin */
  GPIO_InitStruct.Pin = BLK_Pin|heatp_Pin|FEN_Pin;
 8001b4a:	f44f 5391 	mov.w	r3, #4640	; 0x1220
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4829      	ldr	r0, [pc, #164]	; (8001c08 <MX_GPIO_Init+0x198>)
 8001b64:	f001 fc4a 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8001b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4821      	ldr	r0, [pc, #132]	; (8001c08 <MX_GPIO_Init+0x198>)
 8001b82:	f001 fc3b 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDD_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin;
 8001b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDD_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481b      	ldr	r0, [pc, #108]	; (8001c0c <MX_GPIO_Init+0x19c>)
 8001ba0:	f001 fc2c 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8001ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_GPIO_Init+0x19c>)
 8001bbe:	f001 fc1d 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_GPIO_Init+0x19c>)
 8001bdc:	f001 fc0e 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BATN_Pin */
  GPIO_InitStruct.Pin = BATN_Pin;
 8001be0:	2310      	movs	r3, #16
 8001be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BATN_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_GPIO_Init+0x198>)
 8001bf4:	f001 fc02 	bl	80033fc <HAL_GPIO_Init>

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40010800 	.word	0x40010800

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <Error_Handler+0x8>
	...

08001c1c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <ST7789_WriteCommand+0x44>)
 8001c2e:	f001 fd80 	bl	8003732 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c38:	480a      	ldr	r0, [pc, #40]	; (8001c64 <ST7789_WriteCommand+0x48>)
 8001c3a:	f001 fd7a 	bl	8003732 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c3e:	1df9      	adds	r1, r7, #7
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	2201      	movs	r2, #1
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <ST7789_WriteCommand+0x4c>)
 8001c48:	f002 fb90 	bl	800436c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <ST7789_WriteCommand+0x44>)
 8001c54:	f001 fd6d 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40010800 	.word	0x40010800
 8001c68:	200000e8 	.word	0x200000e8

08001c6c <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <ST7789_WriteData+0x6c>)
 8001c7e:	f001 fd58 	bl	8003732 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c88:	4814      	ldr	r0, [pc, #80]	; (8001cdc <ST7789_WriteData+0x70>)
 8001c8a:	f001 fd52 	bl	8003732 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001c8e:	e015      	b.n	8001cbc <ST7789_WriteData+0x50>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	4293      	cmp	r3, r2
 8001c98:	bf28      	it	cs
 8001c9a:	4613      	movcs	r3, r2
 8001c9c:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001c9e:	89fa      	ldrh	r2, [r7, #14]
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <ST7789_WriteData+0x74>)
 8001ca8:	f002 fb60 	bl	800436c <HAL_SPI_Transmit>
		buff += chunk_size;
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001cb4:	89fb      	ldrh	r3, [r7, #14]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e6      	bne.n	8001c90 <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <ST7789_WriteData+0x6c>)
 8001cca:	f001 fd32 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40010c00 	.word	0x40010c00
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	200000e8 	.word	0x200000e8

08001ce4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <ST7789_WriteSmallData+0x44>)
 8001cf6:	f001 fd1c 	bl	8003732 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <ST7789_WriteSmallData+0x48>)
 8001d02:	f001 fd16 	bl	8003732 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001d06:	1df9      	adds	r1, r7, #7
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <ST7789_WriteSmallData+0x4c>)
 8001d10:	f002 fb2c 	bl	800436c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <ST7789_WriteSmallData+0x44>)
 8001d1c:	f001 fd09 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	200000e8 	.word	0x200000e8

08001d34 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001d3e:	2036      	movs	r0, #54	; 0x36
 8001d40:	f7ff ff6c 	bl	8001c1c <ST7789_WriteCommand>
	switch (m) {
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d81a      	bhi.n	8001d80 <ST7789_SetRotation+0x4c>
 8001d4a:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <ST7789_SetRotation+0x1c>)
 8001d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001d69 	.word	0x08001d69
 8001d58:	08001d71 	.word	0x08001d71
 8001d5c:	08001d79 	.word	0x08001d79
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001d60:	20c0      	movs	r0, #192	; 0xc0
 8001d62:	f7ff ffbf 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d66:	e00c      	b.n	8001d82 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d68:	20a0      	movs	r0, #160	; 0xa0
 8001d6a:	f7ff ffbb 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d6e:	e008      	b.n	8001d82 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ffb7 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d76:	e004      	b.n	8001d82 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d78:	2060      	movs	r0, #96	; 0x60
 8001d7a:	f7ff ffb3 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d7e:	e000      	b.n	8001d82 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001d80:	bf00      	nop
	}
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	80fb      	strh	r3, [r7, #6]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80bb      	strh	r3, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001db0:	4824      	ldr	r0, [pc, #144]	; (8001e44 <ST7789_SetAddressWindow+0xb8>)
 8001db2:	f001 fcbe 	bl	8003732 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	82fb      	strh	r3, [r7, #22]
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	827b      	strh	r3, [r7, #18]
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001dc6:	202a      	movs	r0, #42	; 0x2a
 8001dc8:	f7ff ff28 	bl	8001c1c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	733b      	strb	r3, [r7, #12]
 8001dd6:	8afb      	ldrh	r3, [r7, #22]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	737b      	strb	r3, [r7, #13]
 8001ddc:	8abb      	ldrh	r3, [r7, #20]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73bb      	strb	r3, [r7, #14]
 8001de6:	8abb      	ldrh	r3, [r7, #20]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2104      	movs	r1, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff3a 	bl	8001c6c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001df8:	202b      	movs	r0, #43	; 0x2b
 8001dfa:	f7ff ff0f 	bl	8001c1c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	723b      	strb	r3, [r7, #8]
 8001e08:	8a7b      	ldrh	r3, [r7, #18]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	727b      	strb	r3, [r7, #9]
 8001e0e:	8a3b      	ldrh	r3, [r7, #16]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	72bb      	strb	r3, [r7, #10]
 8001e18:	8a3b      	ldrh	r3, [r7, #16]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	2104      	movs	r1, #4
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff21 	bl	8001c6c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001e2a:	202c      	movs	r0, #44	; 0x2c
 8001e2c:	f7ff fef6 	bl	8001c1c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <ST7789_SetAddressWindow+0xb8>)
 8001e38:	f001 fc7b 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	40010c00 	.word	0x40010c00

08001e48 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 8001e4e:	2019      	movs	r0, #25
 8001e50:	f000 fd90 	bl	8002974 <HAL_Delay>
    ST7789_RST_Clr();
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e5a:	4847      	ldr	r0, [pc, #284]	; (8001f78 <ST7789_Init+0x130>)
 8001e5c:	f001 fc69 	bl	8003732 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001e60:	2019      	movs	r0, #25
 8001e62:	f000 fd87 	bl	8002974 <HAL_Delay>
    ST7789_RST_Set();
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	4842      	ldr	r0, [pc, #264]	; (8001f78 <ST7789_Init+0x130>)
 8001e6e:	f001 fc60 	bl	8003732 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001e72:	2032      	movs	r0, #50	; 0x32
 8001e74:	f000 fd7e 	bl	8002974 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001e78:	203a      	movs	r0, #58	; 0x3a
 8001e7a:	f7ff fecf 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001e7e:	2055      	movs	r0, #85	; 0x55
 8001e80:	f7ff ff30 	bl	8001ce4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001e84:	20b2      	movs	r0, #178	; 0xb2
 8001e86:	f7ff fec9 	bl	8001c1c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <ST7789_Init+0x134>)
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e94:	6018      	str	r0, [r3, #0]
 8001e96:	3304      	adds	r3, #4
 8001e98:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fee3 	bl	8001c6c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f7ff ff44 	bl	8001d34 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001eac:	20b7      	movs	r0, #183	; 0xb7
 8001eae:	f7ff feb5 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001eb2:	2035      	movs	r0, #53	; 0x35
 8001eb4:	f7ff ff16 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001eb8:	20bb      	movs	r0, #187	; 0xbb
 8001eba:	f7ff feaf 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001ebe:	2019      	movs	r0, #25
 8001ec0:	f7ff ff10 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001ec4:	20c0      	movs	r0, #192	; 0xc0
 8001ec6:	f7ff fea9 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001eca:	202c      	movs	r0, #44	; 0x2c
 8001ecc:	f7ff ff0a 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001ed0:	20c2      	movs	r0, #194	; 0xc2
 8001ed2:	f7ff fea3 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff ff04 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001edc:	20c3      	movs	r0, #195	; 0xc3
 8001ede:	f7ff fe9d 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001ee2:	2012      	movs	r0, #18
 8001ee4:	f7ff fefe 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001ee8:	20c4      	movs	r0, #196	; 0xc4
 8001eea:	f7ff fe97 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001eee:	2020      	movs	r0, #32
 8001ef0:	f7ff fef8 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001ef4:	20c6      	movs	r0, #198	; 0xc6
 8001ef6:	f7ff fe91 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001efa:	200f      	movs	r0, #15
 8001efc:	f7ff fef2 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001f00:	20d0      	movs	r0, #208	; 0xd0
 8001f02:	f7ff fe8b 	bl	8001c1c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001f06:	20a4      	movs	r0, #164	; 0xa4
 8001f08:	f7ff feec 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001f0c:	20a1      	movs	r0, #161	; 0xa1
 8001f0e:	f7ff fee9 	bl	8001ce4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001f12:	20e0      	movs	r0, #224	; 0xe0
 8001f14:	f7ff fe82 	bl	8001c1c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <ST7789_Init+0x138>)
 8001f1a:	f107 0410 	add.w	r4, r7, #16
 8001f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f20:	c407      	stmia	r4!, {r0, r1, r2}
 8001f22:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	210e      	movs	r1, #14
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fe9e 	bl	8001c6c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001f30:	20e1      	movs	r0, #225	; 0xe1
 8001f32:	f7ff fe73 	bl	8001c1c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <ST7789_Init+0x13c>)
 8001f38:	463c      	mov	r4, r7
 8001f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f3e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f40:	463b      	mov	r3, r7
 8001f42:	210e      	movs	r1, #14
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe91 	bl	8001c6c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001f4a:	2021      	movs	r0, #33	; 0x21
 8001f4c:	f7ff fe66 	bl	8001c1c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001f50:	2011      	movs	r0, #17
 8001f52:	f7ff fe63 	bl	8001c1c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001f56:	2013      	movs	r0, #19
 8001f58:	f7ff fe60 	bl	8001c1c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001f5c:	2029      	movs	r0, #41	; 0x29
 8001f5e:	f7ff fe5d 	bl	8001c1c <ST7789_WriteCommand>

	HAL_Delay(50);
 8001f62:	2032      	movs	r0, #50	; 0x32
 8001f64:	f000 fd06 	bl	8002974 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f80d 	bl	8001f88 <ST7789_Fill_Color>
}
 8001f6e:	bf00      	nop
 8001f70:	372c      	adds	r7, #44	; 0x2c
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40010800 	.word	0x40010800
 8001f7c:	08005bec 	.word	0x08005bec
 8001f80:	08005bf4 	.word	0x08005bf4
 8001f84:	08005c04 	.word	0x08005c04

08001f88 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001f92:	23ef      	movs	r3, #239	; 0xef
 8001f94:	22ef      	movs	r2, #239	; 0xef
 8001f96:	2100      	movs	r1, #0
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fef7 	bl	8001d8c <ST7789_SetAddressWindow>
	ST7789_Select();
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <ST7789_Fill_Color+0x78>)
 8001fa6:	f001 fbc4 	bl	8003732 <HAL_GPIO_WritePin>
	for (i = 0; i < ST7789_WIDTH; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	81fb      	strh	r3, [r7, #14]
 8001fae:	e019      	b.n	8001fe4 <ST7789_Fill_Color+0x5c>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	81bb      	strh	r3, [r7, #12]
 8001fb4:	e010      	b.n	8001fd8 <ST7789_Fill_Color+0x50>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	723b      	strb	r3, [r7, #8]
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe4d 	bl	8001c6c <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8001fd2:	89bb      	ldrh	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	81bb      	strh	r3, [r7, #12]
 8001fd8:	89bb      	ldrh	r3, [r7, #12]
 8001fda:	2bef      	cmp	r3, #239	; 0xef
 8001fdc:	d9eb      	bls.n	8001fb6 <ST7789_Fill_Color+0x2e>
	for (i = 0; i < ST7789_WIDTH; i++)
 8001fde:	89fb      	ldrh	r3, [r7, #14]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	81fb      	strh	r3, [r7, #14]
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	2bef      	cmp	r3, #239	; 0xef
 8001fe8:	d9e2      	bls.n	8001fb0 <ST7789_Fill_Color+0x28>
		}
	ST7789_UnSelect();
 8001fea:	2201      	movs	r2, #1
 8001fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <ST7789_Fill_Color+0x78>)
 8001ff2:	f001 fb9e 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40010c00 	.word	0x40010c00

08002004 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
 800200e:	460b      	mov	r3, r1
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	2bef      	cmp	r3, #239	; 0xef
 800201a:	d823      	bhi.n	8002064 <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800201c:	88bb      	ldrh	r3, [r7, #4]
 800201e:	2bef      	cmp	r3, #239	; 0xef
 8002020:	d820      	bhi.n	8002064 <ST7789_DrawPixel+0x60>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8002022:	88bb      	ldrh	r3, [r7, #4]
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	88b9      	ldrh	r1, [r7, #4]
 8002028:	88f8      	ldrh	r0, [r7, #6]
 800202a:	f7ff feaf 	bl	8001d8c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	733b      	strb	r3, [r7, #12]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <ST7789_DrawPixel+0x68>)
 8002046:	f001 fb74 	bl	8003732 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fe0b 	bl	8001c6c <ST7789_WriteData>
	ST7789_UnSelect();
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <ST7789_DrawPixel+0x68>)
 800205e:	f001 fb68 	bl	8003732 <HAL_GPIO_WritePin>
 8002062:	e000      	b.n	8002066 <ST7789_DrawPixel+0x62>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002064:	bf00      	nop
}
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40010c00 	.word	0x40010c00

08002070 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	4604      	mov	r4, r0
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	4603      	mov	r3, r0
 8002084:	80bb      	strh	r3, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]
 800208a:	4613      	mov	r3, r2
 800208c:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 800208e:	883a      	ldrh	r2, [r7, #0]
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002098:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800209c:	8879      	ldrh	r1, [r7, #2]
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	1acb      	subs	r3, r1, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bfb8      	it	lt
 80020a6:	425b      	neglt	r3, r3
 80020a8:	429a      	cmp	r2, r3
 80020aa:	bfcc      	ite	gt
 80020ac:	2301      	movgt	r3, #1
 80020ae:	2300      	movle	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80020b4:	8a7b      	ldrh	r3, [r7, #18]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <ST7789_DrawLine+0x62>
		swap = x0;
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80020be:	88bb      	ldrh	r3, [r7, #4]
 80020c0:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80020c2:	8a3b      	ldrh	r3, [r7, #16]
 80020c4:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80020ca:	883b      	ldrh	r3, [r7, #0]
 80020cc:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80020ce:	8a3b      	ldrh	r3, [r7, #16]
 80020d0:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d90b      	bls.n	80020f2 <ST7789_DrawLine+0x82>
		swap = x0;
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80020e2:	8a3b      	ldrh	r3, [r7, #16]
 80020e4:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80020e6:	88bb      	ldrh	r3, [r7, #4]
 80020e8:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80020ea:	883b      	ldrh	r3, [r7, #0]
 80020ec:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80020ee:	8a3b      	ldrh	r3, [r7, #16]
 80020f0:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80020fc:	883a      	ldrh	r2, [r7, #0]
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	bfb8      	it	lt
 8002106:	425b      	neglt	r3, r3
 8002108:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 800210a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210e:	0fda      	lsrs	r2, r3, #31
 8002110:	4413      	add	r3, r2
 8002112:	105b      	asrs	r3, r3, #1
 8002114:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8002116:	88ba      	ldrh	r2, [r7, #4]
 8002118:	883b      	ldrh	r3, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d202      	bcs.n	8002124 <ST7789_DrawLine+0xb4>
        ystep = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	82bb      	strh	r3, [r7, #20]
 8002122:	e028      	b.n	8002176 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8002124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002128:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 800212a:	e024      	b.n	8002176 <ST7789_DrawLine+0x106>
        if (steep) {
 800212c:	8a7b      	ldrh	r3, [r7, #18]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8002132:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002134:	88f9      	ldrh	r1, [r7, #6]
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff63 	bl	8002004 <ST7789_DrawPixel>
 800213e:	e005      	b.n	800214c <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8002140:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002142:	88b9      	ldrh	r1, [r7, #4]
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff5c 	bl	8002004 <ST7789_DrawPixel>
        }
        err -= dy;
 800214c:	8afa      	ldrh	r2, [r7, #22]
 800214e:	89bb      	ldrh	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8002156:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da08      	bge.n	8002170 <ST7789_DrawLine+0x100>
            y0 += ystep;
 800215e:	8aba      	ldrh	r2, [r7, #20]
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002166:	8afa      	ldrh	r2, [r7, #22]
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	3301      	adds	r3, #1
 8002174:	80fb      	strh	r3, [r7, #6]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	429a      	cmp	r2, r3
 800217c:	d9d6      	bls.n	800212c <ST7789_DrawLine+0xbc>
        }
    }
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af02      	add	r7, sp, #8
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	4603      	mov	r3, r0
 800219c:	80bb      	strh	r3, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ac:	4818      	ldr	r0, [pc, #96]	; (8002210 <ST7789_DrawRectangle+0x88>)
 80021ae:	f001 fac0 	bl	8003732 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80021b2:	88bc      	ldrh	r4, [r7, #4]
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	88b9      	ldrh	r1, [r7, #4]
 80021b8:	88f8      	ldrh	r0, [r7, #6]
 80021ba:	8b3b      	ldrh	r3, [r7, #24]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f7ff ff56 	bl	8002070 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80021c4:	883c      	ldrh	r4, [r7, #0]
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	88b9      	ldrh	r1, [r7, #4]
 80021ca:	88f8      	ldrh	r0, [r7, #6]
 80021cc:	8b3b      	ldrh	r3, [r7, #24]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4623      	mov	r3, r4
 80021d2:	f7ff ff4d 	bl	8002070 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 80021d6:	883c      	ldrh	r4, [r7, #0]
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	8839      	ldrh	r1, [r7, #0]
 80021dc:	88f8      	ldrh	r0, [r7, #6]
 80021de:	8b3b      	ldrh	r3, [r7, #24]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4623      	mov	r3, r4
 80021e4:	f7ff ff44 	bl	8002070 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 80021e8:	883c      	ldrh	r4, [r7, #0]
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	88b9      	ldrh	r1, [r7, #4]
 80021ee:	8878      	ldrh	r0, [r7, #2]
 80021f0:	8b3b      	ldrh	r3, [r7, #24]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4623      	mov	r3, r4
 80021f6:	f7ff ff3b 	bl	8002070 <ST7789_DrawLine>
	ST7789_UnSelect();
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <ST7789_DrawRectangle+0x88>)
 8002202:	f001 fa96 	bl	8003732 <HAL_GPIO_WritePin>
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	40010c00 	.word	0x40010c00

08002214 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002214:	b082      	sub	sp, #8
 8002216:	b590      	push	{r4, r7, lr}
 8002218:	b089      	sub	sp, #36	; 0x24
 800221a:	af00      	add	r7, sp, #0
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
 8002222:	460b      	mov	r3, r1
 8002224:	80bb      	strh	r3, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800222a:	2200      	movs	r2, #0
 800222c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002230:	4838      	ldr	r0, [pc, #224]	; (8002314 <ST7789_WriteChar+0x100>)
 8002232:	f001 fa7e 	bl	8003732 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002236:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800223a:	b29a      	uxth	r2, r3
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4413      	add	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29c      	uxth	r4, r3
 8002246:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800224a:	b29a      	uxth	r2, r3
 800224c:	88bb      	ldrh	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	88b9      	ldrh	r1, [r7, #4]
 8002258:	88f8      	ldrh	r0, [r7, #6]
 800225a:	4622      	mov	r2, r4
 800225c:	f7ff fd96 	bl	8001d8c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	e043      	b.n	80022ee <ST7789_WriteChar+0xda>
		b = font.data[(ch - 32) * font.height + i];
 8002266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	3b20      	subs	r3, #32
 800226c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4619      	mov	r1, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	440b      	add	r3, r1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e029      	b.n	80022dc <ST7789_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <ST7789_WriteChar+0xa2>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002298:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	743b      	strb	r3, [r7, #16]
 80022a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	2102      	movs	r1, #2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fcdc 	bl	8001c6c <ST7789_WriteData>
 80022b4:	e00f      	b.n	80022d6 <ST7789_WriteChar+0xc2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80022b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	733b      	strb	r3, [r7, #12]
 80022c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fccb 	bl	8001c6c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3301      	adds	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e0:	461a      	mov	r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d3cf      	bcc.n	8002288 <ST7789_WriteChar+0x74>
	for (i = 0; i < font.height; i++) {
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f2:	461a      	mov	r2, r3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d3b5      	bcc.n	8002266 <ST7789_WriteChar+0x52>
			}
		}
	}
	ST7789_UnSelect();
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <ST7789_WriteChar+0x100>)
 8002302:	f001 fa16 	bl	8003732 <HAL_GPIO_WritePin>
}
 8002306:	bf00      	nop
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002310:	b002      	add	sp, #8
 8002312:	4770      	bx	lr
 8002314:	40010c00 	.word	0x40010c00

08002318 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002318:	b082      	sub	sp, #8
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af04      	add	r7, sp, #16
 8002320:	603a      	str	r2, [r7, #0]
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	4603      	mov	r3, r0
 8002326:	80fb      	strh	r3, [r7, #6]
 8002328:	460b      	mov	r3, r1
 800232a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <ST7789_WriteString+0xa4>)
 8002334:	f001 f9fd 	bl	8003732 <HAL_GPIO_WritePin>
	while (*str) {
 8002338:	e02d      	b.n	8002396 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	7d3a      	ldrb	r2, [r7, #20]
 800233e:	4413      	add	r3, r2
 8002340:	2bef      	cmp	r3, #239	; 0xef
 8002342:	dd13      	ble.n	800236c <ST7789_WriteString+0x54>
			x = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002348:	7d7b      	ldrb	r3, [r7, #21]
 800234a:	b29a      	uxth	r2, r3
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	7d7a      	ldrb	r2, [r7, #21]
 8002356:	4413      	add	r3, r2
 8002358:	2bef      	cmp	r3, #239	; 0xef
 800235a:	dc21      	bgt.n	80023a0 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b20      	cmp	r3, #32
 8002362:	d103      	bne.n	800236c <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	603b      	str	r3, [r7, #0]
				continue;
 800236a:	e014      	b.n	8002396 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	88b9      	ldrh	r1, [r7, #4]
 8002372:	88f8      	ldrh	r0, [r7, #6]
 8002374:	8c3b      	ldrh	r3, [r7, #32]
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	8bbb      	ldrh	r3, [r7, #28]
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f7ff ff47 	bl	8002214 <ST7789_WriteChar>
		x += font.width;
 8002386:	7d3b      	ldrb	r3, [r7, #20]
 8002388:	b29a      	uxth	r2, r3
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4413      	add	r3, r2
 800238e:	80fb      	strh	r3, [r7, #6]
		str++;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1cd      	bne.n	800233a <ST7789_WriteString+0x22>
 800239e:	e000      	b.n	80023a2 <ST7789_WriteString+0x8a>
				break;
 80023a0:	bf00      	nop
	}
	ST7789_UnSelect();
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <ST7789_WriteString+0xa4>)
 80023aa:	f001 f9c2 	bl	8003732 <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023b8:	b002      	add	sp, #8
 80023ba:	4770      	bx	lr
 80023bc:	40010c00 	.word	0x40010c00

080023c0 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4604      	mov	r4, r0
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	80fb      	strh	r3, [r7, #6]
 80023d2:	4603      	mov	r3, r0
 80023d4:	80bb      	strh	r3, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]
 80023da:	4613      	mov	r3, r2
 80023dc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e4:	4822      	ldr	r0, [pc, #136]	; (8002470 <ST7789_DrawFilledRectangle+0xb0>)
 80023e6:	f001 f9a4 	bl	8003732 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	2bef      	cmp	r3, #239	; 0xef
 80023ee:	d83b      	bhi.n	8002468 <ST7789_DrawFilledRectangle+0xa8>
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	2bef      	cmp	r3, #239	; 0xef
 80023f4:	d838      	bhi.n	8002468 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4413      	add	r3, r2
 80023fc:	2bef      	cmp	r3, #239	; 0xef
 80023fe:	dd03      	ble.n	8002408 <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002406:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8002408:	88ba      	ldrh	r2, [r7, #4]
 800240a:	883b      	ldrh	r3, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	2bef      	cmp	r3, #239	; 0xef
 8002410:	dd03      	ble.n	800241a <ST7789_DrawFilledRectangle+0x5a>
		h = ST7789_HEIGHT - y;
 8002412:	88bb      	ldrh	r3, [r7, #4]
 8002414:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002418:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e017      	b.n	8002450 <ST7789_DrawFilledRectangle+0x90>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	b29a      	uxth	r2, r3
 8002424:	88bb      	ldrh	r3, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	b299      	uxth	r1, r3
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	4413      	add	r3, r2
 8002430:	b29c      	uxth	r4, r3
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	b29a      	uxth	r2, r3
 8002436:	88bb      	ldrh	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	b29a      	uxth	r2, r3
 800243c:	88f8      	ldrh	r0, [r7, #6]
 800243e:	8c3b      	ldrh	r3, [r7, #32]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	4622      	mov	r2, r4
 8002446:	f7ff fe13 	bl	8002070 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	b29b      	uxth	r3, r3
 8002454:	883a      	ldrh	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d2e2      	bcs.n	8002420 <ST7789_DrawFilledRectangle+0x60>
	}
	ST7789_UnSelect();
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <ST7789_DrawFilledRectangle+0xb0>)
 8002462:	f001 f966 	bl	8003732 <HAL_GPIO_WritePin>
 8002466:	e000      	b.n	800246a <ST7789_DrawFilledRectangle+0xaa>
		return;
 8002468:	bf00      	nop
}
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	40010c00 	.word	0x40010c00

08002474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_MspInit+0x5c>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_MspInit+0x5c>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6193      	str	r3, [r2, #24]
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_MspInit+0x5c>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_MspInit+0x5c>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_MspInit+0x5c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_MspInit+0x5c>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_MspInit+0x60>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_MspInit+0x60>)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000

080024d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0318 	add.w	r3, r7, #24
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_ADC_MspInit+0xbc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d122      	bne.n	800253e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002528:	2301      	movs	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252c:	2303      	movs	r3, #3
 800252e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	4619      	mov	r1, r3
 8002536:	4819      	ldr	r0, [pc, #100]	; (800259c <HAL_ADC_MspInit+0xc4>)
 8002538:	f000 ff60 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800253c:	e026      	b.n	800258c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_ADC_MspInit+0xc8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d121      	bne.n	800258c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a12      	ldr	r2, [pc, #72]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 800254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_ADC_MspInit+0xc0>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800257c:	2303      	movs	r3, #3
 800257e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	4619      	mov	r1, r3
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <HAL_ADC_MspInit+0xc4>)
 8002588:	f000 ff38 	bl	80033fc <HAL_GPIO_Init>
}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40012400 	.word	0x40012400
 8002598:	40021000 	.word	0x40021000
 800259c:	40010800 	.word	0x40010800
 80025a0:	40012800 	.word	0x40012800

080025a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_SPI_MspInit+0x74>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d124      	bne.n	800260e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_SPI_MspInit+0x78>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_SPI_MspInit+0x78>)
 80025ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ce:	61d3      	str	r3, [r2, #28]
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_SPI_MspInit+0x78>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_SPI_MspInit+0x78>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_SPI_MspInit+0x78>)
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_SPI_MspInit+0x78>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025f4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80025f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_SPI_MspInit+0x7c>)
 800260a:	f000 fef7 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40003800 	.word	0x40003800
 800261c:	40021000 	.word	0x40021000
 8002620:	40010c00 	.word	0x40010c00

08002624 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002642:	d14e      	bne.n	80026e2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	61d3      	str	r3, [r2, #28]
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_TIM_Encoder_MspInit+0xc8>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800268c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80026a2:	f000 feab 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026a6:	2308      	movs	r3, #8
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xd0>)
 80026ba:	f000 fe9f 	bl	80033fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3728      	adds	r7, #40	; 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010800 	.word	0x40010800
 80026f4:	40010c00 	.word	0x40010c00
 80026f8:	40010000 	.word	0x40010000

080026fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_TIM_PWM_MspInit+0x34>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10b      	bne.n	8002726 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_TIM_PWM_MspInit+0x38>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_TIM_PWM_MspInit+0x38>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_TIM_PWM_MspInit+0x38>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40000800 	.word	0x40000800
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_TIM_MspPostInit+0x58>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d117      	bne.n	8002788 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_TIM_MspPostInit+0x5c>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_TIM_MspPostInit+0x5c>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_TIM_MspPostInit+0x5c>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002770:	2340      	movs	r3, #64	; 0x40
 8002772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2302      	movs	r3, #2
 800277a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <HAL_TIM_MspPostInit+0x60>)
 8002784:	f000 fe3a 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002788:	bf00      	nop
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40000800 	.word	0x40000800
 8002794:	40021000 	.word	0x40021000
 8002798:	40010c00 	.word	0x40010c00

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e2:	f000 f8ab 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <_sbrk>:
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <_sbrk+0x5c>)
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <_sbrk+0x60>)
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <_sbrk+0x22>
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <_sbrk+0x64>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <_sbrk+0x68>)
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d207      	bcs.n	800282c <_sbrk+0x40>
 800281c:	f002 fd1a 	bl	8005254 <__errno>
 8002820:	4603      	mov	r3, r0
 8002822:	220c      	movs	r2, #12
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	e009      	b.n	8002840 <_sbrk+0x54>
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <_sbrk+0x64>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <_sbrk+0x64>)
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20005000 	.word	0x20005000
 800284c:	00000400 	.word	0x00000400
 8002850:	200000dc 	.word	0x200000dc
 8002854:	20000258 	.word	0x20000258

08002858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <Reset_Handler>:
 8002864:	2100      	movs	r1, #0
 8002866:	e003      	b.n	8002870 <LoopCopyDataInit>

08002868 <CopyDataInit>:
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <LoopFillZerobss+0x14>)
 800286a:	585b      	ldr	r3, [r3, r1]
 800286c:	5043      	str	r3, [r0, r1]
 800286e:	3104      	adds	r1, #4

08002870 <LoopCopyDataInit>:
 8002870:	480a      	ldr	r0, [pc, #40]	; (800289c <LoopFillZerobss+0x18>)
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <LoopFillZerobss+0x1c>)
 8002874:	1842      	adds	r2, r0, r1
 8002876:	429a      	cmp	r2, r3
 8002878:	d3f6      	bcc.n	8002868 <CopyDataInit>
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <LoopFillZerobss+0x20>)
 800287c:	e002      	b.n	8002884 <LoopFillZerobss>

0800287e <FillZerobss>:
 800287e:	2300      	movs	r3, #0
 8002880:	f842 3b04 	str.w	r3, [r2], #4

08002884 <LoopFillZerobss>:
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <LoopFillZerobss+0x24>)
 8002886:	429a      	cmp	r2, r3
 8002888:	d3f9      	bcc.n	800287e <FillZerobss>
 800288a:	f7ff ffe5 	bl	8002858 <SystemInit>
 800288e:	f002 fce7 	bl	8005260 <__libc_init_array>
 8002892:	f7fe fe41 	bl	8001518 <main>
 8002896:	4770      	bx	lr
 8002898:	08007044 	.word	0x08007044
 800289c:	20000000 	.word	0x20000000
 80028a0:	200000a8 	.word	0x200000a8
 80028a4:	200000a8 	.word	0x200000a8
 80028a8:	20000258 	.word	0x20000258

080028ac <ADC1_2_IRQHandler>:
 80028ac:	e7fe      	b.n	80028ac <ADC1_2_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_Init+0x28>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_Init+0x28>)
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 fd67 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 f808 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fdd2 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x54>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd71 	bl	80033e2 <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f000 fd47 	bl	80033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_InitTick+0x5c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000038 	.word	0x20000038
 8002934:	20000040 	.word	0x20000040
 8002938:	2000003c 	.word	0x2000003c

0800293c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x1c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x20>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_IncTick+0x20>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000040 	.word	0x20000040
 800295c:	20000244 	.word	0x20000244

08002960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_GetTick+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000244 	.word	0x20000244

08002974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff fff0 	bl	8002960 <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d005      	beq.n	800299a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_Delay+0x44>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800299a:	bf00      	nop
 800299c:	f7ff ffe0 	bl	8002960 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d8f7      	bhi.n	800299c <HAL_Delay+0x28>
  {
  }
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000040 	.word	0x20000040

080029bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0be      	b.n	8002b5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fd6c 	bl	80024d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fbdd 	bl	80031c0 <ADC_ConversionStop_Disable>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 8099 	bne.w	8002b4a <HAL_ADC_Init+0x18e>
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8095 	bne.w	8002b4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a28:	f023 0302 	bic.w	r3, r3, #2
 8002a2c:	f043 0202 	orr.w	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7b1b      	ldrb	r3, [r3, #12]
 8002a42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a54:	d003      	beq.n	8002a5e <HAL_ADC_Init+0xa2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_ADC_Init+0xa8>
 8002a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a62:	e000      	b.n	8002a66 <HAL_ADC_Init+0xaa>
 8002a64:	2300      	movs	r3, #0
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7d1b      	ldrb	r3, [r3, #20]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d119      	bne.n	8002aa8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7b1b      	ldrb	r3, [r3, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	035a      	lsls	r2, r3, #13
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_ADC_Init+0x1a8>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad8:	d003      	beq.n	8002ae2 <HAL_ADC_Init+0x126>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d104      	bne.n	8002aec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	051b      	lsls	r3, r3, #20
 8002aea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_ADC_Init+0x1ac>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d10b      	bne.n	8002b28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b26:	e018      	b.n	8002b5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f023 0312 	bic.w	r3, r3, #18
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b48:	e007      	b.n	8002b5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	ffe1f7fd 	.word	0xffe1f7fd
 8002b68:	ff1f0efe 	.word	0xff1f0efe

08002b6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Start+0x1a>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e098      	b.n	8002cb8 <HAL_ADC_Start+0x14c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fac4 	bl	800311c <ADC_Enable>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8087 	bne.w	8002cae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a41      	ldr	r2, [pc, #260]	; (8002cc0 <HAL_ADC_Start+0x154>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d105      	bne.n	8002bca <HAL_ADC_Start+0x5e>
 8002bbe:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_ADC_Start+0x158>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d026      	beq.n	8002c32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bf4:	e01d      	b.n	8002c32 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2f      	ldr	r2, [pc, #188]	; (8002cc4 <HAL_ADC_Start+0x158>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_ADC_Start+0xaa>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <HAL_ADC_Start+0x154>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10d      	bne.n	8002c32 <HAL_ADC_Start+0xc6>
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_ADC_Start+0x158>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f023 0206 	bic.w	r2, r3, #6
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c4a:	e002      	b.n	8002c52 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0202 	mvn.w	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c72:	d113      	bne.n	8002c9c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_ADC_Start+0x154>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_ADC_Start+0x158>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	e00c      	b.n	8002cb6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	e003      	b.n	8002cb6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40012800 	.word	0x40012800
 8002cc4:	40012400 	.word	0x40012400

08002cc8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Stop+0x1a>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e01a      	b.n	8002d18 <HAL_ADC_Stop+0x50>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa68 	bl	80031c0 <ADC_ConversionStop_Disable>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d36:	f7ff fe13 	bl	8002960 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0c8      	b.n	8002ef4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d12a      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d123      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d7e:	e01a      	b.n	8002db6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d016      	beq.n	8002db6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_ADC_PollForConversion+0x7e>
 8002d8e:	f7ff fde7 	bl	8002960 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d20b      	bcs.n	8002db6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e09e      	b.n	8002ef4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0dd      	beq.n	8002d80 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dc4:	e06c      	b.n	8002ea0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_ADC_PollForConversion+0x1dc>)
 8002dc8:	681c      	ldr	r4, [r3, #0]
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f001 f986 	bl	80040dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6919      	ldr	r1, [r3, #16]
 8002ddc:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_ADC_PollForConversion+0x1e0>)
 8002dde:	400b      	ands	r3, r1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d118      	bne.n	8002e16 <HAL_ADC_PollForConversion+0xf6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68d9      	ldr	r1, [r3, #12]
 8002dea:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_ADC_PollForConversion+0x1e4>)
 8002dec:	400b      	ands	r3, r1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d111      	bne.n	8002e16 <HAL_ADC_PollForConversion+0xf6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_ADC_PollForConversion+0x1e8>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d108      	bne.n	8002e12 <HAL_ADC_PollForConversion+0xf2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_ADC_PollForConversion+0x1ec>)
 8002e08:	400b      	ands	r3, r1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_PollForConversion+0xf2>
 8002e0e:	2314      	movs	r3, #20
 8002e10:	e020      	b.n	8002e54 <HAL_ADC_PollForConversion+0x134>
 8002e12:	2329      	movs	r3, #41	; 0x29
 8002e14:	e01e      	b.n	8002e54 <HAL_ADC_PollForConversion+0x134>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6919      	ldr	r1, [r3, #16]
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_ADC_PollForConversion+0x1e8>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_PollForConversion+0x112>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <HAL_ADC_PollForConversion+0x1ec>)
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <HAL_ADC_PollForConversion+0x12e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <HAL_ADC_PollForConversion+0x1f0>)
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <HAL_ADC_PollForConversion+0x132>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HAL_ADC_PollForConversion+0x1f0>)
 8002e48:	400b      	ands	r3, r1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_PollForConversion+0x132>
 8002e4e:	2354      	movs	r3, #84	; 0x54
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_PollForConversion+0x134>
 8002e52:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e5a:	e01d      	b.n	8002e98 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d016      	beq.n	8002e92 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_ADC_PollForConversion+0x15a>
 8002e6a:	f7ff fd79 	bl	8002960 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20b      	bcs.n	8002e92 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e030      	b.n	8002ef4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8dd      	bhi.n	8002e5c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0212 	mvn.w	r2, #18
 8002ea8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ec0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ec4:	d115      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd90      	pop	{r4, r7, pc}
 8002efc:	20000038 	.word	0x20000038
 8002f00:	24924924 	.word	0x24924924
 8002f04:	00924924 	.word	0x00924924
 8002f08:	12492492 	.word	0x12492492
 8002f0c:	00492492 	.word	0x00492492
 8002f10:	00249249 	.word	0x00249249

08002f14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x20>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0dc      	b.n	8003106 <HAL_ADC_ConfigChannel+0x1da>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b06      	cmp	r3, #6
 8002f5a:	d81c      	bhi.n	8002f96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b05      	subs	r3, #5
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b05      	subs	r3, #5
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34
 8002f94:	e03c      	b.n	8003010 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d81c      	bhi.n	8002fd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b23      	subs	r3, #35	; 0x23
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	4019      	ands	r1, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b23      	subs	r3, #35	; 0x23
 8002fca:	fa00 f203 	lsl.w	r2, r0, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd6:	e01b      	b.n	8003010 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b41      	subs	r3, #65	; 0x41
 8002fea:	221f      	movs	r2, #31
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4019      	ands	r1, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	3b41      	subs	r3, #65	; 0x41
 8003004:	fa00 f203 	lsl.w	r2, r0, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b09      	cmp	r3, #9
 8003016:	d91c      	bls.n	8003052 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68d9      	ldr	r1, [r3, #12]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	3b1e      	subs	r3, #30
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	4019      	ands	r1, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6898      	ldr	r0, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	3b1e      	subs	r3, #30
 8003044:	fa00 f203 	lsl.w	r2, r0, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e019      	b.n	8003086 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6919      	ldr	r1, [r3, #16]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	2207      	movs	r2, #7
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	4019      	ands	r1, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	fa00 f203 	lsl.w	r2, r0, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d003      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003092:	2b11      	cmp	r3, #17
 8003094:	d132      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <HAL_ADC_ConfigChannel+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d125      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d126      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030bc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d11a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <HAL_ADC_ConfigChannel+0x1e8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_ADC_ConfigChannel+0x1ec>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0c9a      	lsrs	r2, r3, #18
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030dc:	e002      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <HAL_ADC_ConfigChannel+0x1b2>
 80030ea:	e007      	b.n	80030fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40012400 	.word	0x40012400
 8003114:	20000038 	.word	0x20000038
 8003118:	431bde83 	.word	0x431bde83

0800311c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d039      	beq.n	80031ae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <ADC_Enable+0x9c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <ADC_Enable+0xa0>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003158:	e002      	b.n	8003160 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3b01      	subs	r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f9      	bne.n	800315a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003166:	f7ff fbfb 	bl	8002960 <HAL_GetTick>
 800316a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800316c:	e018      	b.n	80031a0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800316e:	f7ff fbf7 	bl	8002960 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d911      	bls.n	80031a0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f043 0210 	orr.w	r2, r3, #16
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d1df      	bne.n	800316e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000038 	.word	0x20000038
 80031bc:	431bde83 	.word	0x431bde83

080031c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d127      	bne.n	800322a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ea:	f7ff fbb9 	bl	8002960 <HAL_GetTick>
 80031ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031f0:	e014      	b.n	800321c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031f2:	f7ff fbb5 	bl	8002960 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d90d      	bls.n	800321c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e007      	b.n	800322c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d0e3      	beq.n	80031f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800325c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003266:	4a04      	ldr	r2, [pc, #16]	; (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	60d3      	str	r3, [r2, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <__NVIC_GetPriorityGrouping+0x18>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 0307 	and.w	r3, r3, #7
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	db0a      	blt.n	80032c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	490c      	ldr	r1, [pc, #48]	; (80032e4 <__NVIC_SetPriority+0x4c>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c0:	e00a      	b.n	80032d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4908      	ldr	r1, [pc, #32]	; (80032e8 <__NVIC_SetPriority+0x50>)
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3b04      	subs	r3, #4
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	761a      	strb	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	bf28      	it	cs
 800330a:	2304      	movcs	r3, #4
 800330c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3304      	adds	r3, #4
 8003312:	2b06      	cmp	r3, #6
 8003314:	d902      	bls.n	800331c <NVIC_EncodePriority+0x30>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3b03      	subs	r3, #3
 800331a:	e000      	b.n	800331e <NVIC_EncodePriority+0x32>
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	f04f 31ff 	mov.w	r1, #4294967295
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43d9      	mvns	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	4313      	orrs	r3, r2
         );
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f7ff ff90 	bl	8003298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff49 	bl	8003234 <__NVIC_SetPriorityGrouping>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033bc:	f7ff ff5e 	bl	800327c <__NVIC_GetPriorityGrouping>
 80033c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	6978      	ldr	r0, [r7, #20]
 80033c8:	f7ff ff90 	bl	80032ec <NVIC_EncodePriority>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff5f 	bl	8003298 <__NVIC_SetPriority>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ffb0 	bl	8003350 <SysTick_Config>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b08b      	sub	sp, #44	; 0x2c
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340e:	e169      	b.n	80036e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003410:	2201      	movs	r2, #1
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	f040 8158 	bne.w	80036de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4a9a      	ldr	r2, [pc, #616]	; (800369c <HAL_GPIO_Init+0x2a0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d05e      	beq.n	80034f6 <HAL_GPIO_Init+0xfa>
 8003438:	4a98      	ldr	r2, [pc, #608]	; (800369c <HAL_GPIO_Init+0x2a0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d875      	bhi.n	800352a <HAL_GPIO_Init+0x12e>
 800343e:	4a98      	ldr	r2, [pc, #608]	; (80036a0 <HAL_GPIO_Init+0x2a4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d058      	beq.n	80034f6 <HAL_GPIO_Init+0xfa>
 8003444:	4a96      	ldr	r2, [pc, #600]	; (80036a0 <HAL_GPIO_Init+0x2a4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d86f      	bhi.n	800352a <HAL_GPIO_Init+0x12e>
 800344a:	4a96      	ldr	r2, [pc, #600]	; (80036a4 <HAL_GPIO_Init+0x2a8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d052      	beq.n	80034f6 <HAL_GPIO_Init+0xfa>
 8003450:	4a94      	ldr	r2, [pc, #592]	; (80036a4 <HAL_GPIO_Init+0x2a8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d869      	bhi.n	800352a <HAL_GPIO_Init+0x12e>
 8003456:	4a94      	ldr	r2, [pc, #592]	; (80036a8 <HAL_GPIO_Init+0x2ac>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d04c      	beq.n	80034f6 <HAL_GPIO_Init+0xfa>
 800345c:	4a92      	ldr	r2, [pc, #584]	; (80036a8 <HAL_GPIO_Init+0x2ac>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d863      	bhi.n	800352a <HAL_GPIO_Init+0x12e>
 8003462:	4a92      	ldr	r2, [pc, #584]	; (80036ac <HAL_GPIO_Init+0x2b0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d046      	beq.n	80034f6 <HAL_GPIO_Init+0xfa>
 8003468:	4a90      	ldr	r2, [pc, #576]	; (80036ac <HAL_GPIO_Init+0x2b0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d85d      	bhi.n	800352a <HAL_GPIO_Init+0x12e>
 800346e:	2b12      	cmp	r3, #18
 8003470:	d82a      	bhi.n	80034c8 <HAL_GPIO_Init+0xcc>
 8003472:	2b12      	cmp	r3, #18
 8003474:	d859      	bhi.n	800352a <HAL_GPIO_Init+0x12e>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <HAL_GPIO_Init+0x80>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	080034f7 	.word	0x080034f7
 8003480:	080034d1 	.word	0x080034d1
 8003484:	080034e3 	.word	0x080034e3
 8003488:	08003525 	.word	0x08003525
 800348c:	0800352b 	.word	0x0800352b
 8003490:	0800352b 	.word	0x0800352b
 8003494:	0800352b 	.word	0x0800352b
 8003498:	0800352b 	.word	0x0800352b
 800349c:	0800352b 	.word	0x0800352b
 80034a0:	0800352b 	.word	0x0800352b
 80034a4:	0800352b 	.word	0x0800352b
 80034a8:	0800352b 	.word	0x0800352b
 80034ac:	0800352b 	.word	0x0800352b
 80034b0:	0800352b 	.word	0x0800352b
 80034b4:	0800352b 	.word	0x0800352b
 80034b8:	0800352b 	.word	0x0800352b
 80034bc:	0800352b 	.word	0x0800352b
 80034c0:	080034d9 	.word	0x080034d9
 80034c4:	080034ed 	.word	0x080034ed
 80034c8:	4a79      	ldr	r2, [pc, #484]	; (80036b0 <HAL_GPIO_Init+0x2b4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ce:	e02c      	b.n	800352a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	623b      	str	r3, [r7, #32]
          break;
 80034d6:	e029      	b.n	800352c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	3304      	adds	r3, #4
 80034de:	623b      	str	r3, [r7, #32]
          break;
 80034e0:	e024      	b.n	800352c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	3308      	adds	r3, #8
 80034e8:	623b      	str	r3, [r7, #32]
          break;
 80034ea:	e01f      	b.n	800352c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	330c      	adds	r3, #12
 80034f2:	623b      	str	r3, [r7, #32]
          break;
 80034f4:	e01a      	b.n	800352c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034fe:	2304      	movs	r3, #4
 8003500:	623b      	str	r3, [r7, #32]
          break;
 8003502:	e013      	b.n	800352c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800350c:	2308      	movs	r3, #8
 800350e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	611a      	str	r2, [r3, #16]
          break;
 8003516:	e009      	b.n	800352c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003518:	2308      	movs	r3, #8
 800351a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	615a      	str	r2, [r3, #20]
          break;
 8003522:	e003      	b.n	800352c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003524:	2300      	movs	r3, #0
 8003526:	623b      	str	r3, [r7, #32]
          break;
 8003528:	e000      	b.n	800352c <HAL_GPIO_Init+0x130>
          break;
 800352a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d801      	bhi.n	8003536 <HAL_GPIO_Init+0x13a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	e001      	b.n	800353a <HAL_GPIO_Init+0x13e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2bff      	cmp	r3, #255	; 0xff
 8003540:	d802      	bhi.n	8003548 <HAL_GPIO_Init+0x14c>
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	e002      	b.n	800354e <HAL_GPIO_Init+0x152>
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	3b08      	subs	r3, #8
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	210f      	movs	r1, #15
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	431a      	orrs	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80b1 	beq.w	80036de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800357c:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <HAL_GPIO_Init+0x2b8>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_GPIO_Init+0x2b8>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6193      	str	r3, [r2, #24]
 8003588:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <HAL_GPIO_Init+0x2b8>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003594:	4a48      	ldr	r2, [pc, #288]	; (80036b8 <HAL_GPIO_Init+0x2bc>)
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	220f      	movs	r2, #15
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a40      	ldr	r2, [pc, #256]	; (80036bc <HAL_GPIO_Init+0x2c0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_GPIO_Init+0x1ec>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3f      	ldr	r2, [pc, #252]	; (80036c0 <HAL_GPIO_Init+0x2c4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00d      	beq.n	80035e4 <HAL_GPIO_Init+0x1e8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3e      	ldr	r2, [pc, #248]	; (80036c4 <HAL_GPIO_Init+0x2c8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <HAL_GPIO_Init+0x1e4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3d      	ldr	r2, [pc, #244]	; (80036c8 <HAL_GPIO_Init+0x2cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_GPIO_Init+0x1e0>
 80035d8:	2303      	movs	r3, #3
 80035da:	e006      	b.n	80035ea <HAL_GPIO_Init+0x1ee>
 80035dc:	2304      	movs	r3, #4
 80035de:	e004      	b.n	80035ea <HAL_GPIO_Init+0x1ee>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e002      	b.n	80035ea <HAL_GPIO_Init+0x1ee>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_GPIO_Init+0x1ee>
 80035e8:	2300      	movs	r3, #0
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	f002 0203 	and.w	r2, r2, #3
 80035f0:	0092      	lsls	r2, r2, #2
 80035f2:	4093      	lsls	r3, r2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035fa:	492f      	ldr	r1, [pc, #188]	; (80036b8 <HAL_GPIO_Init+0x2bc>)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	3302      	adds	r3, #2
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	492c      	ldr	r1, [pc, #176]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	43db      	mvns	r3, r3
 800362a:	4928      	ldr	r1, [pc, #160]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800362c:	4013      	ands	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	43db      	mvns	r3, r3
 8003652:	491e      	ldr	r1, [pc, #120]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003654:	4013      	ands	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d006      	beq.n	8003672 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4918      	ldr	r1, [pc, #96]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]
 8003670:	e006      	b.n	8003680 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	43db      	mvns	r3, r3
 800367a:	4914      	ldr	r1, [pc, #80]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800367c:	4013      	ands	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d021      	beq.n	80036d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_GPIO_Init+0x2d0>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	60cb      	str	r3, [r1, #12]
 8003698:	e021      	b.n	80036de <HAL_GPIO_Init+0x2e2>
 800369a:	bf00      	nop
 800369c:	10320000 	.word	0x10320000
 80036a0:	10310000 	.word	0x10310000
 80036a4:	10220000 	.word	0x10220000
 80036a8:	10210000 	.word	0x10210000
 80036ac:	10120000 	.word	0x10120000
 80036b0:	10110000 	.word	0x10110000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40010800 	.word	0x40010800
 80036c0:	40010c00 	.word	0x40010c00
 80036c4:	40011000 	.word	0x40011000
 80036c8:	40011400 	.word	0x40011400
 80036cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_GPIO_Init+0x304>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	4909      	ldr	r1, [pc, #36]	; (8003700 <HAL_GPIO_Init+0x304>)
 80036da:	4013      	ands	r3, r2
 80036dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	3301      	adds	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f47f ae8e 	bne.w	8003410 <HAL_GPIO_Init+0x14>
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	372c      	adds	r7, #44	; 0x2c
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40010400 	.word	0x40010400

08003704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e001      	b.n	8003726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	807b      	strh	r3, [r7, #2]
 800373e:	4613      	mov	r3, r2
 8003740:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003742:	787b      	ldrb	r3, [r7, #1]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800374e:	e003      	b.n	8003758 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	041a      	lsls	r2, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	611a      	str	r2, [r3, #16]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e26c      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003784:	4b92      	ldr	r3, [pc, #584]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003790:	4b8f      	ldr	r3, [pc, #572]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d112      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5e>
 800379c:	4b8c      	ldr	r3, [pc, #560]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b89      	ldr	r3, [pc, #548]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06c      	beq.n	8003890 <HAL_RCC_OscConfig+0x12c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d168      	bne.n	8003890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e246      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x76>
 80037cc:	4b80      	ldr	r3, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7f      	ldr	r2, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e02e      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7a      	ldr	r2, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b78      	ldr	r3, [pc, #480]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0xbc>
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a71      	ldr	r2, [pc, #452]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 8003820:	4b6b      	ldr	r3, [pc, #428]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7ff f88e 	bl	8002960 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7ff f88a 	bl	8002960 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1fa      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5d      	ldr	r3, [pc, #372]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xe4>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7ff f87a 	bl	8002960 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7ff f876 	bl	8002960 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1e6      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x10c>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389e:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038aa:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x18c>
 80038b6:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x176>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1ba      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4939      	ldr	r1, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x270>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7ff f82f 	bl	8002960 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7ff f82b 	bl	8002960 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e19b      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4927      	ldr	r1, [pc, #156]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCC_OscConfig+0x270>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7ff f80e 	bl	8002960 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003948:	f7ff f80a 	bl	8002960 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e17a      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03a      	beq.n	80039e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fe ffee 	bl	8002960 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe ffea 	bl	8002960 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e15a      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f000 fac4 	bl	8003f34 <RCC_Delay>
 80039ac:	e01c      	b.n	80039e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fe ffd4 	bl	8002960 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fe ffd0 	bl	8002960 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d908      	bls.n	80039dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e140      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	42420000 	.word	0x42420000
 80039d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b9e      	ldr	r3, [pc, #632]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e9      	bne.n	80039bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a6 	beq.w	8003b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b97      	ldr	r3, [pc, #604]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b94      	ldr	r3, [pc, #592]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4a93      	ldr	r2, [pc, #588]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	61d3      	str	r3, [r2, #28]
 8003a12:	4b91      	ldr	r3, [pc, #580]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b8e      	ldr	r3, [pc, #568]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b8b      	ldr	r3, [pc, #556]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a8a      	ldr	r2, [pc, #552]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe ff91 	bl	8002960 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe ff8d 	bl	8002960 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e0fd      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b81      	ldr	r3, [pc, #516]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x312>
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4a7a      	ldr	r2, [pc, #488]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6213      	str	r3, [r2, #32]
 8003a74:	e02d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003a7e:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6213      	str	r3, [r2, #32]
 8003a8a:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a72      	ldr	r2, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x356>
 8003aa0:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a6c      	ldr	r2, [pc, #432]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a69      	ldr	r2, [pc, #420]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003aba:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a63      	ldr	r2, [pc, #396]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7fe ff41 	bl	8002960 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe ff3d 	bl	8002960 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0ab      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x37e>
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fe ff2b 	bl	8002960 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fe ff27 	bl	8002960 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e095      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b36:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4a47      	ldr	r2, [pc, #284]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8081 	beq.w	8003c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d061      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d146      	bne.n	8003bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <HAL_RCC_OscConfig+0x4fc>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fefb 	bl	8002960 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe fef7 	bl	8002960 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e067      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	492d      	ldr	r1, [pc, #180]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a19      	ldr	r1, [r3, #32]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	4927      	ldr	r1, [pc, #156]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x4fc>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fecb 	bl	8002960 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe fec7 	bl	8002960 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e037      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x46a>
 8003bec:	e02f      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_RCC_OscConfig+0x4fc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe feb4 	bl	8002960 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe feb0 	bl	8002960 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e020      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x498>
 8003c1a:	e018      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e013      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42420060 	.word	0x42420060

08003c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0d0      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d910      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 0207 	bic.w	r2, r3, #7
 8003c8e:	4965      	ldr	r1, [pc, #404]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b63      	ldr	r3, [pc, #396]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0b8      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc0:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd8:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	494d      	ldr	r1, [pc, #308]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d040      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d115      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e073      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e06b      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4936      	ldr	r1, [pc, #216]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d54:	f7fe fe04 	bl	8002960 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fe fe00 	bl	8002960 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e053      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 020c 	and.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1eb      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d210      	bcs.n	8003db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 0207 	bic.w	r2, r3, #7
 8003d9a:	4922      	ldr	r1, [pc, #136]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e032      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4916      	ldr	r1, [pc, #88]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df2:	f000 f821 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	490a      	ldr	r1, [pc, #40]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	5ccb      	ldrb	r3, [r1, r3]
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1cc>)
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1d0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fd62 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08006ff0 	.word	0x08006ff0
 8003e30:	20000038 	.word	0x20000038
 8003e34:	2000003c 	.word	0x2000003c

08003e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	b490      	push	{r4, r7}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e40:	1d3c      	adds	r4, r7, #4
 8003e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e48:	f240 2301 	movw	r3, #513	; 0x201
 8003e4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x40>
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x46>
 8003e76:	e02d      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7a:	623b      	str	r3, [r7, #32]
      break;
 8003e7c:	e02d      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	0c9b      	lsrs	r3, r3, #18
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	0c5b      	lsrs	r3, r3, #17
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eaa:	4413      	add	r3, r2
 8003eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb6:	fb02 f203 	mul.w	r2, r2, r3
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e004      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4a0b      	ldr	r2, [pc, #44]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	623b      	str	r3, [r7, #32]
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed6:	623b      	str	r3, [r7, #32]
      break;
 8003ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc90      	pop	{r4, r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	08005c84 	.word	0x08005c84
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	007a1200 	.word	0x007a1200
 8003ef4:	003d0900 	.word	0x003d0900

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	20000038 	.word	0x20000038

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff fff2 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0adb      	lsrs	r3, r3, #11
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	08007000 	.word	0x08007000

08003f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <RCC_Delay+0x34>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <RCC_Delay+0x38>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0a5b      	lsrs	r3, r3, #9
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f50:	bf00      	nop
  }
  while (Delay --);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f9      	bne.n	8003f50 <RCC_Delay+0x1c>
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	20000038 	.word	0x20000038
 8003f6c:	10624dd3 	.word	0x10624dd3

08003f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d07d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10d      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9c:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4a4b      	ldr	r2, [pc, #300]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	61d3      	str	r3, [r2, #28]
 8003fa8:	4b49      	ldr	r3, [pc, #292]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d118      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a42      	ldr	r2, [pc, #264]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd0:	f7fe fcc6 	bl	8002960 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fe fcc2 	bl	8002960 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e06d      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02e      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d027      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004024:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800402a:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d014      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe fc91 	bl	8002960 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fe fc8d 	bl	8002960 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e036      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4917      	ldr	r1, [pc, #92]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	4313      	orrs	r3, r2
 8004074:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004086:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	490b      	ldr	r1, [pc, #44]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
 80040d8:	42420440 	.word	0x42420440

080040dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b08d      	sub	sp, #52	; 0x34
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040e4:	4b5a      	ldr	r3, [pc, #360]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80040e6:	f107 040c 	add.w	r4, r7, #12
 80040ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040f0:	f240 2301 	movw	r3, #513	; 0x201
 80040f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	2300      	movs	r3, #0
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	2300      	movs	r3, #0
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b10      	cmp	r3, #16
 8004114:	f200 8091 	bhi.w	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d04c      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d07c      	beq.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004124:	e089      	b.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004126:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800412c:	4b49      	ldr	r3, [pc, #292]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8082 	beq.w	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	0c9b      	lsrs	r3, r3, #18
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004146:	4413      	add	r3, r2
 8004148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800414c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d018      	beq.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004158:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c5b      	lsrs	r3, r3, #17
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004166:	4413      	add	r3, r2
 8004168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004178:	4a37      	ldr	r2, [pc, #220]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004188:	e004      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	4a33      	ldr	r2, [pc, #204]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d102      	bne.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041a6:	e04a      	b.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041b6:	e042      	b.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c8:	d108      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80041d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	e01f      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d109      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80041f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	e00f      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004206:	d11c      	bne.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004214:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800421a:	e012      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800421c:	e011      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800421e:	f7ff fe75 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004222:	4602      	mov	r2, r0
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	0b9b      	lsrs	r3, r3, #14
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	3301      	adds	r3, #1
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004238:	e004      	b.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004242:	bf00      	nop
    }
  }
  return (frequency);
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004246:	4618      	mov	r0, r3
 8004248:	3734      	adds	r7, #52	; 0x34
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}
 800424e:	bf00      	nop
 8004250:	08005c94 	.word	0x08005c94
 8004254:	40021000 	.word	0x40021000
 8004258:	007a1200 	.word	0x007a1200
 800425c:	003d0900 	.word	0x003d0900
 8004260:	aaaaaaab 	.word	0xaaaaaaab

08004264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e076      	b.n	8004364 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004286:	d009      	beq.n	800429c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
 800428e:	e005      	b.n	800429c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fe f974 	bl	80025a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	ea42 0103 	orr.w	r1, r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	0c1a      	lsrs	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f002 0204 	and.w	r2, r2, #4
 8004342:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69da      	ldr	r2, [r3, #28]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004352:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_SPI_Transmit+0x22>
 800438a:	2302      	movs	r3, #2
 800438c:	e126      	b.n	80045dc <HAL_SPI_Transmit+0x270>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004396:	f7fe fae3 	bl	8002960 <HAL_GetTick>
 800439a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
 80043ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043b0:	e10b      	b.n	80045ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_SPI_Transmit+0x52>
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043c2:	e102      	b.n	80045ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2203      	movs	r2, #3
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440a:	d10f      	bne.n	800442c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800442a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d007      	beq.n	800444a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004452:	d14b      	bne.n	80044ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_SPI_Transmit+0xf6>
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d13e      	bne.n	80044e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004486:	e02b      	b.n	80044e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d112      	bne.n	80044bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	881a      	ldrh	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ba:	e011      	b.n	80044e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044bc:	f7fe fa50 	bl	8002960 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d803      	bhi.n	80044d4 <HAL_SPI_Transmit+0x168>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d102      	bne.n	80044da <HAL_SPI_Transmit+0x16e>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044de:	e074      	b.n	80045ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ce      	bne.n	8004488 <HAL_SPI_Transmit+0x11c>
 80044ea:	e04c      	b.n	8004586 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_SPI_Transmit+0x18e>
 80044f4:	8afb      	ldrh	r3, [r7, #22]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d140      	bne.n	800457c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004520:	e02c      	b.n	800457c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d113      	bne.n	8004558 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	86da      	strh	r2, [r3, #54]	; 0x36
 8004556:	e011      	b.n	800457c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004558:	f7fe fa02 	bl	8002960 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d803      	bhi.n	8004570 <HAL_SPI_Transmit+0x204>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d102      	bne.n	8004576 <HAL_SPI_Transmit+0x20a>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	77fb      	strb	r3, [r7, #31]
          goto error;
 800457a:	e026      	b.n	80045ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1cd      	bne.n	8004522 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f8b2 	bl	80046f4 <SPI_EndRxTxTransaction>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e000      	b.n	80045ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80045c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045da:	7ffb      	ldrb	r3, [r7, #31]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f4:	f7fe f9b4 	bl	8002960 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	4413      	add	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004604:	f7fe f9ac 	bl	8002960 <HAL_GetTick>
 8004608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	015b      	lsls	r3, r3, #5
 8004610:	0d1b      	lsrs	r3, r3, #20
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461a:	e054      	b.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d050      	beq.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004624:	f7fe f99c 	bl	8002960 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	429a      	cmp	r2, r3
 8004632:	d902      	bls.n	800463a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d13d      	bne.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004652:	d111      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d004      	beq.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d107      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d10f      	bne.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e017      	b.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d19b      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000038 	.word	0x20000038

080046f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2200      	movs	r2, #0
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ff6a 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e000      	b.n	8004728 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e041      	b.n	80047c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd ffd0 	bl	80026fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 fb04 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start_IT+0x24>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e022      	b.n	800483a <HAL_TIM_PWM_Start_IT+0x6a>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d109      	bne.n	800480e <HAL_TIM_PWM_Start_IT+0x3e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e015      	b.n	800483a <HAL_TIM_PWM_Start_IT+0x6a>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start_IT+0x58>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e008      	b.n	800483a <HAL_TIM_PWM_Start_IT+0x6a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0a4      	b.n	800498c <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start_IT+0x82>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	e013      	b.n	800487a <HAL_TIM_PWM_Start_IT+0xaa>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start_IT+0x92>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	e00b      	b.n	800487a <HAL_TIM_PWM_Start_IT+0xaa>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start_IT+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	e003      	b.n	800487a <HAL_TIM_PWM_Start_IT+0xaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d841      	bhi.n	8004904 <HAL_TIM_PWM_Start_IT+0x134>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	08004905 	.word	0x08004905
 8004890:	08004905 	.word	0x08004905
 8004894:	08004905 	.word	0x08004905
 8004898:	080048cf 	.word	0x080048cf
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004905 	.word	0x08004905
 80048a4:	08004905 	.word	0x08004905
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004905 	.word	0x08004905
 80048b8:	080048f3 	.word	0x080048f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0202 	orr.w	r2, r2, #2
 80048ca:	60da      	str	r2, [r3, #12]
      break;
 80048cc:	e01b      	b.n	8004906 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0204 	orr.w	r2, r2, #4
 80048dc:	60da      	str	r2, [r3, #12]
      break;
 80048de:	e012      	b.n	8004906 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	60da      	str	r2, [r3, #12]
      break;
 80048f0:	e009      	b.n	8004906 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0210 	orr.w	r2, r2, #16
 8004900:	60da      	str	r2, [r3, #12]
      break;
 8004902:	e000      	b.n	8004906 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004904:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fc1e 	bl	8005150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d107      	bne.n	800492e <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_TIM_PWM_Start_IT+0x186>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d009      	beq.n	8004956 <HAL_TIM_PWM_Start_IT+0x186>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_TIM_PWM_Start_IT+0x186>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a12      	ldr	r2, [pc, #72]	; (800499c <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d111      	bne.n	800497a <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d010      	beq.n	800498a <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	e007      	b.n	800498a <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800

080049a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e093      	b.n	8004adc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fd fe2b 	bl	8002624 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 f9c1 	bl	8004d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	4313      	orrs	r3, r2
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a40:	f023 030c 	bic.w	r3, r3, #12
 8004a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	031b      	lsls	r3, r3, #12
 8004a70:	4313      	orrs	r3, r2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004afc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d110      	bne.n	8004b36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d102      	bne.n	8004b20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b1a:	7b7b      	ldrb	r3, [r7, #13]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e069      	b.n	8004bf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b34:	e031      	b.n	8004b9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d110      	bne.n	8004b5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d102      	bne.n	8004b48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b42:	7b3b      	ldrb	r3, [r7, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e055      	b.n	8004bf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b5c:	e01d      	b.n	8004b9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d108      	bne.n	8004b76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b6a:	7b7b      	ldrb	r3, [r7, #13]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d102      	bne.n	8004b76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b70:	7b3b      	ldrb	r3, [r7, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d001      	beq.n	8004b7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e03e      	b.n	8004bf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_TIM_Encoder_Start+0xc4>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d008      	beq.n	8004bb8 <HAL_TIM_Encoder_Start+0xd4>
 8004ba6:	e00f      	b.n	8004bc8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2201      	movs	r2, #1
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 facd 	bl	8005150 <TIM_CCxChannelCmd>
      break;
 8004bb6:	e016      	b.n	8004be6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fac5 	bl	8005150 <TIM_CCxChannelCmd>
      break;
 8004bc6:	e00e      	b.n	8004be6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fabd 	bl	8005150 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2104      	movs	r1, #4
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fab6 	bl	8005150 <TIM_CCxChannelCmd>
      break;
 8004be4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ac      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f8e8 	bl	8004e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e062      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f92e 	bl	8004f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f977 	bl	8004fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e021      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f9c1 	bl	80050b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <TIM_Base_SetConfig+0xb8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00b      	beq.n	8004dac <TIM_Base_SetConfig+0x30>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9a:	d007      	beq.n	8004dac <TIM_Base_SetConfig+0x30>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0x30>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <TIM_Base_SetConfig+0xc0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d108      	bne.n	8004dbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <TIM_Base_SetConfig+0xb8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0x62>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0x62>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0x62>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <TIM_Base_SetConfig+0xc0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a07      	ldr	r2, [pc, #28]	; (8004e34 <TIM_Base_SetConfig+0xb8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800

08004e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0302 	bic.w	r3, r3, #2
 8004e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <TIM_OC1_SetConfig+0xc8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d10c      	bne.n	8004eb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0308 	bic.w	r3, r3, #8
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <TIM_OC1_SetConfig+0xc8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d111      	bne.n	8004ee2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00

08004f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f023 0210 	bic.w	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0320 	bic.w	r3, r3, #32
 8004f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <TIM_OC2_SetConfig+0xd0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10d      	bne.n	8004f88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <TIM_OC2_SetConfig+0xd0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d113      	bne.n	8004fb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00

08004fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <TIM_OC3_SetConfig+0xd0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10d      	bne.n	800505a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <TIM_OC3_SetConfig+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d113      	bne.n	800508a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	621a      	str	r2, [r3, #32]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40012c00 	.word	0x40012c00

080050b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	031b      	lsls	r3, r3, #12
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a0f      	ldr	r2, [pc, #60]	; (800514c <TIM_OC4_SetConfig+0x98>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d109      	bne.n	8005128 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800511a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	019b      	lsls	r3, r3, #6
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00

08005150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2201      	movs	r2, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	431a      	orrs	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e046      	b.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a16      	ldr	r2, [pc, #88]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00e      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fc:	d009      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a10      	ldr	r2, [pc, #64]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10c      	bne.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4313      	orrs	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800

08005254 <__errno>:
 8005254:	4b01      	ldr	r3, [pc, #4]	; (800525c <__errno+0x8>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000044 	.word	0x20000044

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	2600      	movs	r6, #0
 8005264:	4d0c      	ldr	r5, [pc, #48]	; (8005298 <__libc_init_array+0x38>)
 8005266:	4c0d      	ldr	r4, [pc, #52]	; (800529c <__libc_init_array+0x3c>)
 8005268:	1b64      	subs	r4, r4, r5
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	42a6      	cmp	r6, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	f000 fc90 	bl	8005b94 <_init>
 8005274:	2600      	movs	r6, #0
 8005276:	4d0a      	ldr	r5, [pc, #40]	; (80052a0 <__libc_init_array+0x40>)
 8005278:	4c0a      	ldr	r4, [pc, #40]	; (80052a4 <__libc_init_array+0x44>)
 800527a:	1b64      	subs	r4, r4, r5
 800527c:	10a4      	asrs	r4, r4, #2
 800527e:	42a6      	cmp	r6, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f855 3b04 	ldr.w	r3, [r5], #4
 8005288:	4798      	blx	r3
 800528a:	3601      	adds	r6, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005292:	4798      	blx	r3
 8005294:	3601      	adds	r6, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	0800703c 	.word	0x0800703c
 800529c:	0800703c 	.word	0x0800703c
 80052a0:	0800703c 	.word	0x0800703c
 80052a4:	08007040 	.word	0x08007040

080052a8 <memset>:
 80052a8:	4603      	mov	r3, r0
 80052aa:	4402      	add	r2, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <sniprintf>:
 80052b8:	b40c      	push	{r2, r3}
 80052ba:	b530      	push	{r4, r5, lr}
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <sniprintf+0x64>)
 80052be:	1e0c      	subs	r4, r1, #0
 80052c0:	681d      	ldr	r5, [r3, #0]
 80052c2:	b09d      	sub	sp, #116	; 0x74
 80052c4:	da08      	bge.n	80052d8 <sniprintf+0x20>
 80052c6:	238b      	movs	r3, #139	; 0x8b
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	602b      	str	r3, [r5, #0]
 80052ce:	b01d      	add	sp, #116	; 0x74
 80052d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d4:	b002      	add	sp, #8
 80052d6:	4770      	bx	lr
 80052d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052e0:	bf0c      	ite	eq
 80052e2:	4623      	moveq	r3, r4
 80052e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	9307      	str	r3, [sp, #28]
 80052ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052f0:	9002      	str	r0, [sp, #8]
 80052f2:	9006      	str	r0, [sp, #24]
 80052f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052f8:	4628      	mov	r0, r5
 80052fa:	ab21      	add	r3, sp, #132	; 0x84
 80052fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052fe:	a902      	add	r1, sp, #8
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	f000 f889 	bl	8005418 <_svfiprintf_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	bfbc      	itt	lt
 800530a:	238b      	movlt	r3, #139	; 0x8b
 800530c:	602b      	strlt	r3, [r5, #0]
 800530e:	2c00      	cmp	r4, #0
 8005310:	d0dd      	beq.n	80052ce <sniprintf+0x16>
 8005312:	2200      	movs	r2, #0
 8005314:	9b02      	ldr	r3, [sp, #8]
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e7d9      	b.n	80052ce <sniprintf+0x16>
 800531a:	bf00      	nop
 800531c:	20000044 	.word	0x20000044

08005320 <siprintf>:
 8005320:	b40e      	push	{r1, r2, r3}
 8005322:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005326:	b500      	push	{lr}
 8005328:	b09c      	sub	sp, #112	; 0x70
 800532a:	ab1d      	add	r3, sp, #116	; 0x74
 800532c:	9002      	str	r0, [sp, #8]
 800532e:	9006      	str	r0, [sp, #24]
 8005330:	9107      	str	r1, [sp, #28]
 8005332:	9104      	str	r1, [sp, #16]
 8005334:	4808      	ldr	r0, [pc, #32]	; (8005358 <siprintf+0x38>)
 8005336:	4909      	ldr	r1, [pc, #36]	; (800535c <siprintf+0x3c>)
 8005338:	f853 2b04 	ldr.w	r2, [r3], #4
 800533c:	9105      	str	r1, [sp, #20]
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	a902      	add	r1, sp, #8
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	f000 f868 	bl	8005418 <_svfiprintf_r>
 8005348:	2200      	movs	r2, #0
 800534a:	9b02      	ldr	r3, [sp, #8]
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	b01c      	add	sp, #112	; 0x70
 8005350:	f85d eb04 	ldr.w	lr, [sp], #4
 8005354:	b003      	add	sp, #12
 8005356:	4770      	bx	lr
 8005358:	20000044 	.word	0x20000044
 800535c:	ffff0208 	.word	0xffff0208

08005360 <__ssputs_r>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	688e      	ldr	r6, [r1, #8]
 8005366:	4682      	mov	sl, r0
 8005368:	429e      	cmp	r6, r3
 800536a:	460c      	mov	r4, r1
 800536c:	4690      	mov	r8, r2
 800536e:	461f      	mov	r7, r3
 8005370:	d838      	bhi.n	80053e4 <__ssputs_r+0x84>
 8005372:	898a      	ldrh	r2, [r1, #12]
 8005374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005378:	d032      	beq.n	80053e0 <__ssputs_r+0x80>
 800537a:	6825      	ldr	r5, [r4, #0]
 800537c:	6909      	ldr	r1, [r1, #16]
 800537e:	3301      	adds	r3, #1
 8005380:	eba5 0901 	sub.w	r9, r5, r1
 8005384:	6965      	ldr	r5, [r4, #20]
 8005386:	444b      	add	r3, r9
 8005388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800538c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005390:	106d      	asrs	r5, r5, #1
 8005392:	429d      	cmp	r5, r3
 8005394:	bf38      	it	cc
 8005396:	461d      	movcc	r5, r3
 8005398:	0553      	lsls	r3, r2, #21
 800539a:	d531      	bpl.n	8005400 <__ssputs_r+0xa0>
 800539c:	4629      	mov	r1, r5
 800539e:	f000 fb53 	bl	8005a48 <_malloc_r>
 80053a2:	4606      	mov	r6, r0
 80053a4:	b950      	cbnz	r0, 80053bc <__ssputs_r+0x5c>
 80053a6:	230c      	movs	r3, #12
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	f8ca 3000 	str.w	r3, [sl]
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053bc:	464a      	mov	r2, r9
 80053be:	6921      	ldr	r1, [r4, #16]
 80053c0:	f000 face 	bl	8005960 <memcpy>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	6126      	str	r6, [r4, #16]
 80053d2:	444e      	add	r6, r9
 80053d4:	6026      	str	r6, [r4, #0]
 80053d6:	463e      	mov	r6, r7
 80053d8:	6165      	str	r5, [r4, #20]
 80053da:	eba5 0509 	sub.w	r5, r5, r9
 80053de:	60a5      	str	r5, [r4, #8]
 80053e0:	42be      	cmp	r6, r7
 80053e2:	d900      	bls.n	80053e6 <__ssputs_r+0x86>
 80053e4:	463e      	mov	r6, r7
 80053e6:	4632      	mov	r2, r6
 80053e8:	4641      	mov	r1, r8
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	f000 fac6 	bl	800597c <memmove>
 80053f0:	68a3      	ldr	r3, [r4, #8]
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	1b9b      	subs	r3, r3, r6
 80053f6:	4432      	add	r2, r6
 80053f8:	2000      	movs	r0, #0
 80053fa:	60a3      	str	r3, [r4, #8]
 80053fc:	6022      	str	r2, [r4, #0]
 80053fe:	e7db      	b.n	80053b8 <__ssputs_r+0x58>
 8005400:	462a      	mov	r2, r5
 8005402:	f000 fb7b 	bl	8005afc <_realloc_r>
 8005406:	4606      	mov	r6, r0
 8005408:	2800      	cmp	r0, #0
 800540a:	d1e1      	bne.n	80053d0 <__ssputs_r+0x70>
 800540c:	4650      	mov	r0, sl
 800540e:	6921      	ldr	r1, [r4, #16]
 8005410:	f000 face 	bl	80059b0 <_free_r>
 8005414:	e7c7      	b.n	80053a6 <__ssputs_r+0x46>
	...

08005418 <_svfiprintf_r>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	4698      	mov	r8, r3
 800541e:	898b      	ldrh	r3, [r1, #12]
 8005420:	4607      	mov	r7, r0
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	460d      	mov	r5, r1
 8005426:	4614      	mov	r4, r2
 8005428:	b09d      	sub	sp, #116	; 0x74
 800542a:	d50e      	bpl.n	800544a <_svfiprintf_r+0x32>
 800542c:	690b      	ldr	r3, [r1, #16]
 800542e:	b963      	cbnz	r3, 800544a <_svfiprintf_r+0x32>
 8005430:	2140      	movs	r1, #64	; 0x40
 8005432:	f000 fb09 	bl	8005a48 <_malloc_r>
 8005436:	6028      	str	r0, [r5, #0]
 8005438:	6128      	str	r0, [r5, #16]
 800543a:	b920      	cbnz	r0, 8005446 <_svfiprintf_r+0x2e>
 800543c:	230c      	movs	r3, #12
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	e0d1      	b.n	80055ea <_svfiprintf_r+0x1d2>
 8005446:	2340      	movs	r3, #64	; 0x40
 8005448:	616b      	str	r3, [r5, #20]
 800544a:	2300      	movs	r3, #0
 800544c:	9309      	str	r3, [sp, #36]	; 0x24
 800544e:	2320      	movs	r3, #32
 8005450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005454:	2330      	movs	r3, #48	; 0x30
 8005456:	f04f 0901 	mov.w	r9, #1
 800545a:	f8cd 800c 	str.w	r8, [sp, #12]
 800545e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005604 <_svfiprintf_r+0x1ec>
 8005462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005466:	4623      	mov	r3, r4
 8005468:	469a      	mov	sl, r3
 800546a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800546e:	b10a      	cbz	r2, 8005474 <_svfiprintf_r+0x5c>
 8005470:	2a25      	cmp	r2, #37	; 0x25
 8005472:	d1f9      	bne.n	8005468 <_svfiprintf_r+0x50>
 8005474:	ebba 0b04 	subs.w	fp, sl, r4
 8005478:	d00b      	beq.n	8005492 <_svfiprintf_r+0x7a>
 800547a:	465b      	mov	r3, fp
 800547c:	4622      	mov	r2, r4
 800547e:	4629      	mov	r1, r5
 8005480:	4638      	mov	r0, r7
 8005482:	f7ff ff6d 	bl	8005360 <__ssputs_r>
 8005486:	3001      	adds	r0, #1
 8005488:	f000 80aa 	beq.w	80055e0 <_svfiprintf_r+0x1c8>
 800548c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548e:	445a      	add	r2, fp
 8005490:	9209      	str	r2, [sp, #36]	; 0x24
 8005492:	f89a 3000 	ldrb.w	r3, [sl]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80a2 	beq.w	80055e0 <_svfiprintf_r+0x1c8>
 800549c:	2300      	movs	r3, #0
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054a6:	f10a 0a01 	add.w	sl, sl, #1
 80054aa:	9304      	str	r3, [sp, #16]
 80054ac:	9307      	str	r3, [sp, #28]
 80054ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b2:	931a      	str	r3, [sp, #104]	; 0x68
 80054b4:	4654      	mov	r4, sl
 80054b6:	2205      	movs	r2, #5
 80054b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054bc:	4851      	ldr	r0, [pc, #324]	; (8005604 <_svfiprintf_r+0x1ec>)
 80054be:	f000 fa41 	bl	8005944 <memchr>
 80054c2:	9a04      	ldr	r2, [sp, #16]
 80054c4:	b9d8      	cbnz	r0, 80054fe <_svfiprintf_r+0xe6>
 80054c6:	06d0      	lsls	r0, r2, #27
 80054c8:	bf44      	itt	mi
 80054ca:	2320      	movmi	r3, #32
 80054cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054d0:	0711      	lsls	r1, r2, #28
 80054d2:	bf44      	itt	mi
 80054d4:	232b      	movmi	r3, #43	; 0x2b
 80054d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054da:	f89a 3000 	ldrb.w	r3, [sl]
 80054de:	2b2a      	cmp	r3, #42	; 0x2a
 80054e0:	d015      	beq.n	800550e <_svfiprintf_r+0xf6>
 80054e2:	4654      	mov	r4, sl
 80054e4:	2000      	movs	r0, #0
 80054e6:	f04f 0c0a 	mov.w	ip, #10
 80054ea:	9a07      	ldr	r2, [sp, #28]
 80054ec:	4621      	mov	r1, r4
 80054ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f2:	3b30      	subs	r3, #48	; 0x30
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d94e      	bls.n	8005596 <_svfiprintf_r+0x17e>
 80054f8:	b1b0      	cbz	r0, 8005528 <_svfiprintf_r+0x110>
 80054fa:	9207      	str	r2, [sp, #28]
 80054fc:	e014      	b.n	8005528 <_svfiprintf_r+0x110>
 80054fe:	eba0 0308 	sub.w	r3, r0, r8
 8005502:	fa09 f303 	lsl.w	r3, r9, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	46a2      	mov	sl, r4
 800550a:	9304      	str	r3, [sp, #16]
 800550c:	e7d2      	b.n	80054b4 <_svfiprintf_r+0x9c>
 800550e:	9b03      	ldr	r3, [sp, #12]
 8005510:	1d19      	adds	r1, r3, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	9103      	str	r1, [sp, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfbb      	ittet	lt
 800551a:	425b      	neglt	r3, r3
 800551c:	f042 0202 	orrlt.w	r2, r2, #2
 8005520:	9307      	strge	r3, [sp, #28]
 8005522:	9307      	strlt	r3, [sp, #28]
 8005524:	bfb8      	it	lt
 8005526:	9204      	strlt	r2, [sp, #16]
 8005528:	7823      	ldrb	r3, [r4, #0]
 800552a:	2b2e      	cmp	r3, #46	; 0x2e
 800552c:	d10c      	bne.n	8005548 <_svfiprintf_r+0x130>
 800552e:	7863      	ldrb	r3, [r4, #1]
 8005530:	2b2a      	cmp	r3, #42	; 0x2a
 8005532:	d135      	bne.n	80055a0 <_svfiprintf_r+0x188>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	3402      	adds	r4, #2
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	9203      	str	r2, [sp, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	bfb8      	it	lt
 8005542:	f04f 33ff 	movlt.w	r3, #4294967295
 8005546:	9305      	str	r3, [sp, #20]
 8005548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005614 <_svfiprintf_r+0x1fc>
 800554c:	2203      	movs	r2, #3
 800554e:	4650      	mov	r0, sl
 8005550:	7821      	ldrb	r1, [r4, #0]
 8005552:	f000 f9f7 	bl	8005944 <memchr>
 8005556:	b140      	cbz	r0, 800556a <_svfiprintf_r+0x152>
 8005558:	2340      	movs	r3, #64	; 0x40
 800555a:	eba0 000a 	sub.w	r0, r0, sl
 800555e:	fa03 f000 	lsl.w	r0, r3, r0
 8005562:	9b04      	ldr	r3, [sp, #16]
 8005564:	3401      	adds	r4, #1
 8005566:	4303      	orrs	r3, r0
 8005568:	9304      	str	r3, [sp, #16]
 800556a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556e:	2206      	movs	r2, #6
 8005570:	4825      	ldr	r0, [pc, #148]	; (8005608 <_svfiprintf_r+0x1f0>)
 8005572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005576:	f000 f9e5 	bl	8005944 <memchr>
 800557a:	2800      	cmp	r0, #0
 800557c:	d038      	beq.n	80055f0 <_svfiprintf_r+0x1d8>
 800557e:	4b23      	ldr	r3, [pc, #140]	; (800560c <_svfiprintf_r+0x1f4>)
 8005580:	bb1b      	cbnz	r3, 80055ca <_svfiprintf_r+0x1b2>
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	3307      	adds	r3, #7
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	3308      	adds	r3, #8
 800558c:	9303      	str	r3, [sp, #12]
 800558e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005590:	4433      	add	r3, r6
 8005592:	9309      	str	r3, [sp, #36]	; 0x24
 8005594:	e767      	b.n	8005466 <_svfiprintf_r+0x4e>
 8005596:	460c      	mov	r4, r1
 8005598:	2001      	movs	r0, #1
 800559a:	fb0c 3202 	mla	r2, ip, r2, r3
 800559e:	e7a5      	b.n	80054ec <_svfiprintf_r+0xd4>
 80055a0:	2300      	movs	r3, #0
 80055a2:	f04f 0c0a 	mov.w	ip, #10
 80055a6:	4619      	mov	r1, r3
 80055a8:	3401      	adds	r4, #1
 80055aa:	9305      	str	r3, [sp, #20]
 80055ac:	4620      	mov	r0, r4
 80055ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055b2:	3a30      	subs	r2, #48	; 0x30
 80055b4:	2a09      	cmp	r2, #9
 80055b6:	d903      	bls.n	80055c0 <_svfiprintf_r+0x1a8>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0c5      	beq.n	8005548 <_svfiprintf_r+0x130>
 80055bc:	9105      	str	r1, [sp, #20]
 80055be:	e7c3      	b.n	8005548 <_svfiprintf_r+0x130>
 80055c0:	4604      	mov	r4, r0
 80055c2:	2301      	movs	r3, #1
 80055c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c8:	e7f0      	b.n	80055ac <_svfiprintf_r+0x194>
 80055ca:	ab03      	add	r3, sp, #12
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	462a      	mov	r2, r5
 80055d0:	4638      	mov	r0, r7
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <_svfiprintf_r+0x1f8>)
 80055d4:	a904      	add	r1, sp, #16
 80055d6:	f3af 8000 	nop.w
 80055da:	1c42      	adds	r2, r0, #1
 80055dc:	4606      	mov	r6, r0
 80055de:	d1d6      	bne.n	800558e <_svfiprintf_r+0x176>
 80055e0:	89ab      	ldrh	r3, [r5, #12]
 80055e2:	065b      	lsls	r3, r3, #25
 80055e4:	f53f af2c 	bmi.w	8005440 <_svfiprintf_r+0x28>
 80055e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ea:	b01d      	add	sp, #116	; 0x74
 80055ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f0:	ab03      	add	r3, sp, #12
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	462a      	mov	r2, r5
 80055f6:	4638      	mov	r0, r7
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <_svfiprintf_r+0x1f8>)
 80055fa:	a904      	add	r1, sp, #16
 80055fc:	f000 f87c 	bl	80056f8 <_printf_i>
 8005600:	e7eb      	b.n	80055da <_svfiprintf_r+0x1c2>
 8005602:	bf00      	nop
 8005604:	08007008 	.word	0x08007008
 8005608:	08007012 	.word	0x08007012
 800560c:	00000000 	.word	0x00000000
 8005610:	08005361 	.word	0x08005361
 8005614:	0800700e 	.word	0x0800700e

08005618 <_printf_common>:
 8005618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	4616      	mov	r6, r2
 800561e:	4699      	mov	r9, r3
 8005620:	688a      	ldr	r2, [r1, #8]
 8005622:	690b      	ldr	r3, [r1, #16]
 8005624:	4607      	mov	r7, r0
 8005626:	4293      	cmp	r3, r2
 8005628:	bfb8      	it	lt
 800562a:	4613      	movlt	r3, r2
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005632:	460c      	mov	r4, r1
 8005634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005638:	b10a      	cbz	r2, 800563e <_printf_common+0x26>
 800563a:	3301      	adds	r3, #1
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	0699      	lsls	r1, r3, #26
 8005642:	bf42      	ittt	mi
 8005644:	6833      	ldrmi	r3, [r6, #0]
 8005646:	3302      	addmi	r3, #2
 8005648:	6033      	strmi	r3, [r6, #0]
 800564a:	6825      	ldr	r5, [r4, #0]
 800564c:	f015 0506 	ands.w	r5, r5, #6
 8005650:	d106      	bne.n	8005660 <_printf_common+0x48>
 8005652:	f104 0a19 	add.w	sl, r4, #25
 8005656:	68e3      	ldr	r3, [r4, #12]
 8005658:	6832      	ldr	r2, [r6, #0]
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	42ab      	cmp	r3, r5
 800565e:	dc28      	bgt.n	80056b2 <_printf_common+0x9a>
 8005660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005664:	1e13      	subs	r3, r2, #0
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	bf18      	it	ne
 800566a:	2301      	movne	r3, #1
 800566c:	0692      	lsls	r2, r2, #26
 800566e:	d42d      	bmi.n	80056cc <_printf_common+0xb4>
 8005670:	4649      	mov	r1, r9
 8005672:	4638      	mov	r0, r7
 8005674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005678:	47c0      	blx	r8
 800567a:	3001      	adds	r0, #1
 800567c:	d020      	beq.n	80056c0 <_printf_common+0xa8>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	68e5      	ldr	r5, [r4, #12]
 8005682:	f003 0306 	and.w	r3, r3, #6
 8005686:	2b04      	cmp	r3, #4
 8005688:	bf18      	it	ne
 800568a:	2500      	movne	r5, #0
 800568c:	6832      	ldr	r2, [r6, #0]
 800568e:	f04f 0600 	mov.w	r6, #0
 8005692:	68a3      	ldr	r3, [r4, #8]
 8005694:	bf08      	it	eq
 8005696:	1aad      	subeq	r5, r5, r2
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	bf08      	it	eq
 800569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfc4      	itt	gt
 80056a4:	1a9b      	subgt	r3, r3, r2
 80056a6:	18ed      	addgt	r5, r5, r3
 80056a8:	341a      	adds	r4, #26
 80056aa:	42b5      	cmp	r5, r6
 80056ac:	d11a      	bne.n	80056e4 <_printf_common+0xcc>
 80056ae:	2000      	movs	r0, #0
 80056b0:	e008      	b.n	80056c4 <_printf_common+0xac>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4652      	mov	r2, sl
 80056b6:	4649      	mov	r1, r9
 80056b8:	4638      	mov	r0, r7
 80056ba:	47c0      	blx	r8
 80056bc:	3001      	adds	r0, #1
 80056be:	d103      	bne.n	80056c8 <_printf_common+0xb0>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c8:	3501      	adds	r5, #1
 80056ca:	e7c4      	b.n	8005656 <_printf_common+0x3e>
 80056cc:	2030      	movs	r0, #48	; 0x30
 80056ce:	18e1      	adds	r1, r4, r3
 80056d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056da:	4422      	add	r2, r4
 80056dc:	3302      	adds	r3, #2
 80056de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e2:	e7c5      	b.n	8005670 <_printf_common+0x58>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4622      	mov	r2, r4
 80056e8:	4649      	mov	r1, r9
 80056ea:	4638      	mov	r0, r7
 80056ec:	47c0      	blx	r8
 80056ee:	3001      	adds	r0, #1
 80056f0:	d0e6      	beq.n	80056c0 <_printf_common+0xa8>
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7d9      	b.n	80056aa <_printf_common+0x92>
	...

080056f8 <_printf_i>:
 80056f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	460c      	mov	r4, r1
 80056fe:	7e27      	ldrb	r7, [r4, #24]
 8005700:	4691      	mov	r9, r2
 8005702:	2f78      	cmp	r7, #120	; 0x78
 8005704:	4680      	mov	r8, r0
 8005706:	469a      	mov	sl, r3
 8005708:	990c      	ldr	r1, [sp, #48]	; 0x30
 800570a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570e:	d807      	bhi.n	8005720 <_printf_i+0x28>
 8005710:	2f62      	cmp	r7, #98	; 0x62
 8005712:	d80a      	bhi.n	800572a <_printf_i+0x32>
 8005714:	2f00      	cmp	r7, #0
 8005716:	f000 80d9 	beq.w	80058cc <_printf_i+0x1d4>
 800571a:	2f58      	cmp	r7, #88	; 0x58
 800571c:	f000 80a4 	beq.w	8005868 <_printf_i+0x170>
 8005720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005728:	e03a      	b.n	80057a0 <_printf_i+0xa8>
 800572a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800572e:	2b15      	cmp	r3, #21
 8005730:	d8f6      	bhi.n	8005720 <_printf_i+0x28>
 8005732:	a001      	add	r0, pc, #4	; (adr r0, 8005738 <_printf_i+0x40>)
 8005734:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005738:	08005791 	.word	0x08005791
 800573c:	080057a5 	.word	0x080057a5
 8005740:	08005721 	.word	0x08005721
 8005744:	08005721 	.word	0x08005721
 8005748:	08005721 	.word	0x08005721
 800574c:	08005721 	.word	0x08005721
 8005750:	080057a5 	.word	0x080057a5
 8005754:	08005721 	.word	0x08005721
 8005758:	08005721 	.word	0x08005721
 800575c:	08005721 	.word	0x08005721
 8005760:	08005721 	.word	0x08005721
 8005764:	080058b3 	.word	0x080058b3
 8005768:	080057d5 	.word	0x080057d5
 800576c:	08005895 	.word	0x08005895
 8005770:	08005721 	.word	0x08005721
 8005774:	08005721 	.word	0x08005721
 8005778:	080058d5 	.word	0x080058d5
 800577c:	08005721 	.word	0x08005721
 8005780:	080057d5 	.word	0x080057d5
 8005784:	08005721 	.word	0x08005721
 8005788:	08005721 	.word	0x08005721
 800578c:	0800589d 	.word	0x0800589d
 8005790:	680b      	ldr	r3, [r1, #0]
 8005792:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	600a      	str	r2, [r1, #0]
 800579c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0a4      	b.n	80058ee <_printf_i+0x1f6>
 80057a4:	6825      	ldr	r5, [r4, #0]
 80057a6:	6808      	ldr	r0, [r1, #0]
 80057a8:	062e      	lsls	r6, r5, #24
 80057aa:	f100 0304 	add.w	r3, r0, #4
 80057ae:	d50a      	bpl.n	80057c6 <_printf_i+0xce>
 80057b0:	6805      	ldr	r5, [r0, #0]
 80057b2:	600b      	str	r3, [r1, #0]
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	da03      	bge.n	80057c0 <_printf_i+0xc8>
 80057b8:	232d      	movs	r3, #45	; 0x2d
 80057ba:	426d      	negs	r5, r5
 80057bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c0:	230a      	movs	r3, #10
 80057c2:	485e      	ldr	r0, [pc, #376]	; (800593c <_printf_i+0x244>)
 80057c4:	e019      	b.n	80057fa <_printf_i+0x102>
 80057c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057ca:	6805      	ldr	r5, [r0, #0]
 80057cc:	600b      	str	r3, [r1, #0]
 80057ce:	bf18      	it	ne
 80057d0:	b22d      	sxthne	r5, r5
 80057d2:	e7ef      	b.n	80057b4 <_printf_i+0xbc>
 80057d4:	680b      	ldr	r3, [r1, #0]
 80057d6:	6825      	ldr	r5, [r4, #0]
 80057d8:	1d18      	adds	r0, r3, #4
 80057da:	6008      	str	r0, [r1, #0]
 80057dc:	0628      	lsls	r0, r5, #24
 80057de:	d501      	bpl.n	80057e4 <_printf_i+0xec>
 80057e0:	681d      	ldr	r5, [r3, #0]
 80057e2:	e002      	b.n	80057ea <_printf_i+0xf2>
 80057e4:	0669      	lsls	r1, r5, #25
 80057e6:	d5fb      	bpl.n	80057e0 <_printf_i+0xe8>
 80057e8:	881d      	ldrh	r5, [r3, #0]
 80057ea:	2f6f      	cmp	r7, #111	; 0x6f
 80057ec:	bf0c      	ite	eq
 80057ee:	2308      	moveq	r3, #8
 80057f0:	230a      	movne	r3, #10
 80057f2:	4852      	ldr	r0, [pc, #328]	; (800593c <_printf_i+0x244>)
 80057f4:	2100      	movs	r1, #0
 80057f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fa:	6866      	ldr	r6, [r4, #4]
 80057fc:	2e00      	cmp	r6, #0
 80057fe:	bfa8      	it	ge
 8005800:	6821      	ldrge	r1, [r4, #0]
 8005802:	60a6      	str	r6, [r4, #8]
 8005804:	bfa4      	itt	ge
 8005806:	f021 0104 	bicge.w	r1, r1, #4
 800580a:	6021      	strge	r1, [r4, #0]
 800580c:	b90d      	cbnz	r5, 8005812 <_printf_i+0x11a>
 800580e:	2e00      	cmp	r6, #0
 8005810:	d04d      	beq.n	80058ae <_printf_i+0x1b6>
 8005812:	4616      	mov	r6, r2
 8005814:	fbb5 f1f3 	udiv	r1, r5, r3
 8005818:	fb03 5711 	mls	r7, r3, r1, r5
 800581c:	5dc7      	ldrb	r7, [r0, r7]
 800581e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005822:	462f      	mov	r7, r5
 8005824:	42bb      	cmp	r3, r7
 8005826:	460d      	mov	r5, r1
 8005828:	d9f4      	bls.n	8005814 <_printf_i+0x11c>
 800582a:	2b08      	cmp	r3, #8
 800582c:	d10b      	bne.n	8005846 <_printf_i+0x14e>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	07df      	lsls	r7, r3, #31
 8005832:	d508      	bpl.n	8005846 <_printf_i+0x14e>
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	6861      	ldr	r1, [r4, #4]
 8005838:	4299      	cmp	r1, r3
 800583a:	bfde      	ittt	le
 800583c:	2330      	movle	r3, #48	; 0x30
 800583e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005842:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005846:	1b92      	subs	r2, r2, r6
 8005848:	6122      	str	r2, [r4, #16]
 800584a:	464b      	mov	r3, r9
 800584c:	4621      	mov	r1, r4
 800584e:	4640      	mov	r0, r8
 8005850:	f8cd a000 	str.w	sl, [sp]
 8005854:	aa03      	add	r2, sp, #12
 8005856:	f7ff fedf 	bl	8005618 <_printf_common>
 800585a:	3001      	adds	r0, #1
 800585c:	d14c      	bne.n	80058f8 <_printf_i+0x200>
 800585e:	f04f 30ff 	mov.w	r0, #4294967295
 8005862:	b004      	add	sp, #16
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	4834      	ldr	r0, [pc, #208]	; (800593c <_printf_i+0x244>)
 800586a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800586e:	680e      	ldr	r6, [r1, #0]
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	f856 5b04 	ldr.w	r5, [r6], #4
 8005876:	061f      	lsls	r7, r3, #24
 8005878:	600e      	str	r6, [r1, #0]
 800587a:	d514      	bpl.n	80058a6 <_printf_i+0x1ae>
 800587c:	07d9      	lsls	r1, r3, #31
 800587e:	bf44      	itt	mi
 8005880:	f043 0320 	orrmi.w	r3, r3, #32
 8005884:	6023      	strmi	r3, [r4, #0]
 8005886:	b91d      	cbnz	r5, 8005890 <_printf_i+0x198>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	f023 0320 	bic.w	r3, r3, #32
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	2310      	movs	r3, #16
 8005892:	e7af      	b.n	80057f4 <_printf_i+0xfc>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	f043 0320 	orr.w	r3, r3, #32
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	2378      	movs	r3, #120	; 0x78
 800589e:	4828      	ldr	r0, [pc, #160]	; (8005940 <_printf_i+0x248>)
 80058a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a4:	e7e3      	b.n	800586e <_printf_i+0x176>
 80058a6:	065e      	lsls	r6, r3, #25
 80058a8:	bf48      	it	mi
 80058aa:	b2ad      	uxthmi	r5, r5
 80058ac:	e7e6      	b.n	800587c <_printf_i+0x184>
 80058ae:	4616      	mov	r6, r2
 80058b0:	e7bb      	b.n	800582a <_printf_i+0x132>
 80058b2:	680b      	ldr	r3, [r1, #0]
 80058b4:	6826      	ldr	r6, [r4, #0]
 80058b6:	1d1d      	adds	r5, r3, #4
 80058b8:	6960      	ldr	r0, [r4, #20]
 80058ba:	600d      	str	r5, [r1, #0]
 80058bc:	0635      	lsls	r5, r6, #24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	d501      	bpl.n	80058c6 <_printf_i+0x1ce>
 80058c2:	6018      	str	r0, [r3, #0]
 80058c4:	e002      	b.n	80058cc <_printf_i+0x1d4>
 80058c6:	0671      	lsls	r1, r6, #25
 80058c8:	d5fb      	bpl.n	80058c2 <_printf_i+0x1ca>
 80058ca:	8018      	strh	r0, [r3, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	4616      	mov	r6, r2
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	e7ba      	b.n	800584a <_printf_i+0x152>
 80058d4:	680b      	ldr	r3, [r1, #0]
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	600a      	str	r2, [r1, #0]
 80058da:	681e      	ldr	r6, [r3, #0]
 80058dc:	2100      	movs	r1, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	6862      	ldr	r2, [r4, #4]
 80058e2:	f000 f82f 	bl	8005944 <memchr>
 80058e6:	b108      	cbz	r0, 80058ec <_printf_i+0x1f4>
 80058e8:	1b80      	subs	r0, r0, r6
 80058ea:	6060      	str	r0, [r4, #4]
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	2300      	movs	r3, #0
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	e7a8      	b.n	800584a <_printf_i+0x152>
 80058f8:	4632      	mov	r2, r6
 80058fa:	4649      	mov	r1, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	47d0      	blx	sl
 8005902:	3001      	adds	r0, #1
 8005904:	d0ab      	beq.n	800585e <_printf_i+0x166>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	079b      	lsls	r3, r3, #30
 800590a:	d413      	bmi.n	8005934 <_printf_i+0x23c>
 800590c:	68e0      	ldr	r0, [r4, #12]
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	4298      	cmp	r0, r3
 8005912:	bfb8      	it	lt
 8005914:	4618      	movlt	r0, r3
 8005916:	e7a4      	b.n	8005862 <_printf_i+0x16a>
 8005918:	2301      	movs	r3, #1
 800591a:	4632      	mov	r2, r6
 800591c:	4649      	mov	r1, r9
 800591e:	4640      	mov	r0, r8
 8005920:	47d0      	blx	sl
 8005922:	3001      	adds	r0, #1
 8005924:	d09b      	beq.n	800585e <_printf_i+0x166>
 8005926:	3501      	adds	r5, #1
 8005928:	68e3      	ldr	r3, [r4, #12]
 800592a:	9903      	ldr	r1, [sp, #12]
 800592c:	1a5b      	subs	r3, r3, r1
 800592e:	42ab      	cmp	r3, r5
 8005930:	dcf2      	bgt.n	8005918 <_printf_i+0x220>
 8005932:	e7eb      	b.n	800590c <_printf_i+0x214>
 8005934:	2500      	movs	r5, #0
 8005936:	f104 0619 	add.w	r6, r4, #25
 800593a:	e7f5      	b.n	8005928 <_printf_i+0x230>
 800593c:	08007019 	.word	0x08007019
 8005940:	0800702a 	.word	0x0800702a

08005944 <memchr>:
 8005944:	4603      	mov	r3, r0
 8005946:	b510      	push	{r4, lr}
 8005948:	b2c9      	uxtb	r1, r1
 800594a:	4402      	add	r2, r0
 800594c:	4293      	cmp	r3, r2
 800594e:	4618      	mov	r0, r3
 8005950:	d101      	bne.n	8005956 <memchr+0x12>
 8005952:	2000      	movs	r0, #0
 8005954:	e003      	b.n	800595e <memchr+0x1a>
 8005956:	7804      	ldrb	r4, [r0, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	428c      	cmp	r4, r1
 800595c:	d1f6      	bne.n	800594c <memchr+0x8>
 800595e:	bd10      	pop	{r4, pc}

08005960 <memcpy>:
 8005960:	440a      	add	r2, r1
 8005962:	4291      	cmp	r1, r2
 8005964:	f100 33ff 	add.w	r3, r0, #4294967295
 8005968:	d100      	bne.n	800596c <memcpy+0xc>
 800596a:	4770      	bx	lr
 800596c:	b510      	push	{r4, lr}
 800596e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005972:	4291      	cmp	r1, r2
 8005974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005978:	d1f9      	bne.n	800596e <memcpy+0xe>
 800597a:	bd10      	pop	{r4, pc}

0800597c <memmove>:
 800597c:	4288      	cmp	r0, r1
 800597e:	b510      	push	{r4, lr}
 8005980:	eb01 0402 	add.w	r4, r1, r2
 8005984:	d902      	bls.n	800598c <memmove+0x10>
 8005986:	4284      	cmp	r4, r0
 8005988:	4623      	mov	r3, r4
 800598a:	d807      	bhi.n	800599c <memmove+0x20>
 800598c:	1e43      	subs	r3, r0, #1
 800598e:	42a1      	cmp	r1, r4
 8005990:	d008      	beq.n	80059a4 <memmove+0x28>
 8005992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800599a:	e7f8      	b.n	800598e <memmove+0x12>
 800599c:	4601      	mov	r1, r0
 800599e:	4402      	add	r2, r0
 80059a0:	428a      	cmp	r2, r1
 80059a2:	d100      	bne.n	80059a6 <memmove+0x2a>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ae:	e7f7      	b.n	80059a0 <memmove+0x24>

080059b0 <_free_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4605      	mov	r5, r0
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d043      	beq.n	8005a40 <_free_r+0x90>
 80059b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059bc:	1f0c      	subs	r4, r1, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	18e4      	addlt	r4, r4, r3
 80059c4:	f000 f8d0 	bl	8005b68 <__malloc_lock>
 80059c8:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <_free_r+0x94>)
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	4610      	mov	r0, r2
 80059ce:	b933      	cbnz	r3, 80059de <_free_r+0x2e>
 80059d0:	6063      	str	r3, [r4, #4]
 80059d2:	6014      	str	r4, [r2, #0]
 80059d4:	4628      	mov	r0, r5
 80059d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059da:	f000 b8cb 	b.w	8005b74 <__malloc_unlock>
 80059de:	42a3      	cmp	r3, r4
 80059e0:	d90a      	bls.n	80059f8 <_free_r+0x48>
 80059e2:	6821      	ldr	r1, [r4, #0]
 80059e4:	1862      	adds	r2, r4, r1
 80059e6:	4293      	cmp	r3, r2
 80059e8:	bf01      	itttt	eq
 80059ea:	681a      	ldreq	r2, [r3, #0]
 80059ec:	685b      	ldreq	r3, [r3, #4]
 80059ee:	1852      	addeq	r2, r2, r1
 80059f0:	6022      	streq	r2, [r4, #0]
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	6004      	str	r4, [r0, #0]
 80059f6:	e7ed      	b.n	80059d4 <_free_r+0x24>
 80059f8:	461a      	mov	r2, r3
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	b10b      	cbz	r3, 8005a02 <_free_r+0x52>
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d9fa      	bls.n	80059f8 <_free_r+0x48>
 8005a02:	6811      	ldr	r1, [r2, #0]
 8005a04:	1850      	adds	r0, r2, r1
 8005a06:	42a0      	cmp	r0, r4
 8005a08:	d10b      	bne.n	8005a22 <_free_r+0x72>
 8005a0a:	6820      	ldr	r0, [r4, #0]
 8005a0c:	4401      	add	r1, r0
 8005a0e:	1850      	adds	r0, r2, r1
 8005a10:	4283      	cmp	r3, r0
 8005a12:	6011      	str	r1, [r2, #0]
 8005a14:	d1de      	bne.n	80059d4 <_free_r+0x24>
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4401      	add	r1, r0
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	6053      	str	r3, [r2, #4]
 8005a20:	e7d8      	b.n	80059d4 <_free_r+0x24>
 8005a22:	d902      	bls.n	8005a2a <_free_r+0x7a>
 8005a24:	230c      	movs	r3, #12
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	e7d4      	b.n	80059d4 <_free_r+0x24>
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1821      	adds	r1, r4, r0
 8005a2e:	428b      	cmp	r3, r1
 8005a30:	bf01      	itttt	eq
 8005a32:	6819      	ldreq	r1, [r3, #0]
 8005a34:	685b      	ldreq	r3, [r3, #4]
 8005a36:	1809      	addeq	r1, r1, r0
 8005a38:	6021      	streq	r1, [r4, #0]
 8005a3a:	6063      	str	r3, [r4, #4]
 8005a3c:	6054      	str	r4, [r2, #4]
 8005a3e:	e7c9      	b.n	80059d4 <_free_r+0x24>
 8005a40:	bd38      	pop	{r3, r4, r5, pc}
 8005a42:	bf00      	nop
 8005a44:	200000e0 	.word	0x200000e0

08005a48 <_malloc_r>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	1ccd      	adds	r5, r1, #3
 8005a4c:	f025 0503 	bic.w	r5, r5, #3
 8005a50:	3508      	adds	r5, #8
 8005a52:	2d0c      	cmp	r5, #12
 8005a54:	bf38      	it	cc
 8005a56:	250c      	movcc	r5, #12
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	db01      	blt.n	8005a62 <_malloc_r+0x1a>
 8005a5e:	42a9      	cmp	r1, r5
 8005a60:	d903      	bls.n	8005a6a <_malloc_r+0x22>
 8005a62:	230c      	movs	r3, #12
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	2000      	movs	r0, #0
 8005a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a6a:	f000 f87d 	bl	8005b68 <__malloc_lock>
 8005a6e:	4921      	ldr	r1, [pc, #132]	; (8005af4 <_malloc_r+0xac>)
 8005a70:	680a      	ldr	r2, [r1, #0]
 8005a72:	4614      	mov	r4, r2
 8005a74:	b99c      	cbnz	r4, 8005a9e <_malloc_r+0x56>
 8005a76:	4f20      	ldr	r7, [pc, #128]	; (8005af8 <_malloc_r+0xb0>)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b923      	cbnz	r3, 8005a86 <_malloc_r+0x3e>
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f000 f862 	bl	8005b48 <_sbrk_r>
 8005a84:	6038      	str	r0, [r7, #0]
 8005a86:	4629      	mov	r1, r5
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 f85d 	bl	8005b48 <_sbrk_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d123      	bne.n	8005ada <_malloc_r+0x92>
 8005a92:	230c      	movs	r3, #12
 8005a94:	4630      	mov	r0, r6
 8005a96:	6033      	str	r3, [r6, #0]
 8005a98:	f000 f86c 	bl	8005b74 <__malloc_unlock>
 8005a9c:	e7e3      	b.n	8005a66 <_malloc_r+0x1e>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	1b5b      	subs	r3, r3, r5
 8005aa2:	d417      	bmi.n	8005ad4 <_malloc_r+0x8c>
 8005aa4:	2b0b      	cmp	r3, #11
 8005aa6:	d903      	bls.n	8005ab0 <_malloc_r+0x68>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	441c      	add	r4, r3
 8005aac:	6025      	str	r5, [r4, #0]
 8005aae:	e004      	b.n	8005aba <_malloc_r+0x72>
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	42a2      	cmp	r2, r4
 8005ab4:	bf0c      	ite	eq
 8005ab6:	600b      	streq	r3, [r1, #0]
 8005ab8:	6053      	strne	r3, [r2, #4]
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 f85a 	bl	8005b74 <__malloc_unlock>
 8005ac0:	f104 000b 	add.w	r0, r4, #11
 8005ac4:	1d23      	adds	r3, r4, #4
 8005ac6:	f020 0007 	bic.w	r0, r0, #7
 8005aca:	1ac2      	subs	r2, r0, r3
 8005acc:	d0cc      	beq.n	8005a68 <_malloc_r+0x20>
 8005ace:	1a1b      	subs	r3, r3, r0
 8005ad0:	50a3      	str	r3, [r4, r2]
 8005ad2:	e7c9      	b.n	8005a68 <_malloc_r+0x20>
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	6864      	ldr	r4, [r4, #4]
 8005ad8:	e7cc      	b.n	8005a74 <_malloc_r+0x2c>
 8005ada:	1cc4      	adds	r4, r0, #3
 8005adc:	f024 0403 	bic.w	r4, r4, #3
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d0e3      	beq.n	8005aac <_malloc_r+0x64>
 8005ae4:	1a21      	subs	r1, r4, r0
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 f82e 	bl	8005b48 <_sbrk_r>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d1dd      	bne.n	8005aac <_malloc_r+0x64>
 8005af0:	e7cf      	b.n	8005a92 <_malloc_r+0x4a>
 8005af2:	bf00      	nop
 8005af4:	200000e0 	.word	0x200000e0
 8005af8:	200000e4 	.word	0x200000e4

08005afc <_realloc_r>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	4607      	mov	r7, r0
 8005b00:	4614      	mov	r4, r2
 8005b02:	460e      	mov	r6, r1
 8005b04:	b921      	cbnz	r1, 8005b10 <_realloc_r+0x14>
 8005b06:	4611      	mov	r1, r2
 8005b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b0c:	f7ff bf9c 	b.w	8005a48 <_malloc_r>
 8005b10:	b922      	cbnz	r2, 8005b1c <_realloc_r+0x20>
 8005b12:	f7ff ff4d 	bl	80059b0 <_free_r>
 8005b16:	4625      	mov	r5, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b1c:	f000 f830 	bl	8005b80 <_malloc_usable_size_r>
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d20f      	bcs.n	8005b44 <_realloc_r+0x48>
 8005b24:	4621      	mov	r1, r4
 8005b26:	4638      	mov	r0, r7
 8005b28:	f7ff ff8e 	bl	8005a48 <_malloc_r>
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d0f2      	beq.n	8005b18 <_realloc_r+0x1c>
 8005b32:	4631      	mov	r1, r6
 8005b34:	4622      	mov	r2, r4
 8005b36:	f7ff ff13 	bl	8005960 <memcpy>
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f7ff ff37 	bl	80059b0 <_free_r>
 8005b42:	e7e9      	b.n	8005b18 <_realloc_r+0x1c>
 8005b44:	4635      	mov	r5, r6
 8005b46:	e7e7      	b.n	8005b18 <_realloc_r+0x1c>

08005b48 <_sbrk_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4d05      	ldr	r5, [pc, #20]	; (8005b64 <_sbrk_r+0x1c>)
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fc fe4a 	bl	80027ec <_sbrk>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_sbrk_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_sbrk_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000248 	.word	0x20000248

08005b68 <__malloc_lock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__malloc_lock+0x8>)
 8005b6a:	f000 b811 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	20000250 	.word	0x20000250

08005b74 <__malloc_unlock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__malloc_unlock+0x8>)
 8005b76:	f000 b80c 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	20000250 	.word	0x20000250

08005b80 <_malloc_usable_size_r>:
 8005b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b84:	1f18      	subs	r0, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfbc      	itt	lt
 8005b8a:	580b      	ldrlt	r3, [r1, r0]
 8005b8c:	18c0      	addlt	r0, r0, r3
 8005b8e:	4770      	bx	lr

08005b90 <__retarget_lock_acquire_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_release_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr
